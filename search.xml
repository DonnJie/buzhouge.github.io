<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/03/28/%E7%94%9F%E6%B4%BB/TJL/</url>
    <content><![CDATA[<h2 id="2023-3-31"><a href="#2023-3-31" class="headerlink" title="2023-3-31"></a>2023-3-31</h2><blockquote>
<p>最近睡觉一直梦见你，好想你。</p>
<p>不知道你最近怎么样，还好吗。</p>
<p>这些天我看了好多别人发的风景照，春天全国都是最美的季节，</p>
<p>好多地方都进入了花海的季节，好想有一天能跟你一起去武汉</p>
<p>、南京…</p>
</blockquote>
<h2 id="2023-3-28"><a href="#2023-3-28" class="headerlink" title="2023-3-28"></a>2023-3-28</h2><blockquote>
<p>好想你，但我不会自暴自弃的；</p>
<p>我相信我们还能相遇；</p>
<p>希望下次相遇时，我们都能变成更好的自己！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❌  ❗️  ⭕️  💯 ✔️ 🔗 </span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Chelsea History</title>
    <url>/2022/07/07/%E8%B6%B3%E7%90%83/%E5%88%87%E5%B0%94%E8%A5%BF/Chelsea%20History/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>足球</category>
        <category>Chelsea History</category>
      </categories>
      <tags>
        <tag>足球</tag>
        <tag>切尔西</tag>
      </tags>
  </entry>
  <entry>
    <title>铁血蓝军，切尔西！</title>
    <url>/2022/04/28/%E8%B6%B3%E7%90%83/%E5%88%87%E5%B0%94%E8%A5%BF/%E5%88%87%E5%B0%94%E8%A5%BF/</url>
    <content><![CDATA[<h1 id="切尔西！"><a href="#切尔西！" class="headerlink" title="切尔西！"></a>切尔西！</h1><blockquote>
<p>Mount!</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202207071033796.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202207071034135.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202207071037834.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202207071000854.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>足球</category>
        <category>切尔西</category>
      </categories>
      <tags>
        <tag>足球</tag>
        <tag>切尔西</tag>
      </tags>
  </entry>
  <entry>
    <title>个人周记</title>
    <url>/2022/04/20/%E7%94%9F%E6%B4%BB/%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="你好，再贝"><a href="#你好，再贝" class="headerlink" title="你好，再贝"></a>你好，再贝</h1><blockquote>
<p>个人日程记录，每天更新，直到我不想更新了…</p>
<p>想写什么写什么</p>
<p>树洞？</p>
</blockquote>
<h2 id="2022-11"><a href="#2022-11" class="headerlink" title="2022-11"></a>2022-11</h2><blockquote>
<p>你所恐惧的只是恐惧本身！</p>
<p>The Champion!</p>
</blockquote>
<blockquote>
<p>Don’t care about foever only care about once owned!</p>
<p>Enjoy your life story!</p>
</blockquote>
<h2 id="2022-8"><a href="#2022-8" class="headerlink" title="2022-8"></a>2022-8</h2><blockquote>
<p>人生的光荣，不在永不失败，而在于能够屡败屡战。——8.17</p>
<p>时光匆匆，逝去的时光无法找回，唯有珍惜当下。 ——8.11</p>
<p>Nothing can compenstate for the loss of time！——8.8</p>
</blockquote>
<blockquote>
<p>I am back !</p>
</blockquote>
<h2 id="2022-7"><a href="#2022-7" class="headerlink" title="2022-7"></a>2022-7</h2><h4 id="7-6"><a href="#7-6" class="headerlink" title="7-6"></a>7-6</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不出去看看吗，一定会出去的！</span><br><span class="line">这里太小了。</span><br></pre></td></tr></table></figure>



<h4 id="7-4"><a href="#7-4" class="headerlink" title="7-4"></a>7-4</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I will join huawei!</span><br><span class="line">stronger,fuller!</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">follow your heart！</span><br></pre></td></tr></table></figure>



<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 好像一直知道自己想要什么，却一直受到干扰，一直不能坚持。</span><br></pre></td></tr></table></figure>



<h2 id="2022-6"><a href="#2022-6" class="headerlink" title="2022-6"></a>2022-6</h2><blockquote>
<p>香农定理为什么说比特改变了世界？</p>
<p>——2022&#x2F;5&#x2F;11                                             </p>
</blockquote>
<h2 id="2022-5"><a href="#2022-5" class="headerlink" title="2022-5"></a>2022-5</h2><blockquote>
<p>智者，不与愚者争辩</p>
<p>——2022&#x2F;5&#x2F;11</p>
</blockquote>
<h3 id="第一周-❌-❗️-⭕️-💯-✔️-🔗"><a href="#第一周-❌-❗️-⭕️-💯-✔️-🔗" class="headerlink" title="第一周                                                        ❌  ❗️  ⭕️  💯 ✔️ 🔗"></a>第一周                                                        ❌  ❗️  ⭕️  💯 ✔️ 🔗</h3><table>
<thead>
<tr>
<th>事件</th>
<th>星期一</th>
<th>星期二</th>
<th>星期三</th>
<th>星期四</th>
<th>星期五</th>
<th>星期六</th>
<th>星期日</th>
</tr>
</thead>
<tbody><tr>
<td>单词-1</td>
<td>✔️</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>单词-2</td>
<td>❌</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据结构</td>
<td>✔️</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Leetcode</td>
<td>❌</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>高数</td>
<td>❌</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>线性代数</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>英语句子||作文</td>
<td>❌</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>本周重点：复习密码学</p>
</blockquote>
<blockquote>
<p>路要一步一步的走，题要一道一道的做，代码要一行一行的敲，没有捷径。</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202205030855066.png"></p>
</blockquote>
<blockquote>
<p>五一的学校</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202205030852046.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202205030854498.png"></p>
</blockquote>
<h2 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h2><blockquote>
<p>人总会怀念以前</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204281146257.png"></p>
<p>2022&#x2F;4&#x2F;8</p>
</blockquote>
<blockquote>
<p><a href="https://www.chelseafc.com/">Chelsea</a> 铁血！</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204281153261.png"></p>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><table>
<thead>
<tr>
<th>事件</th>
<th>星期一</th>
<th>星期二</th>
<th>星期三</th>
<th>星期四</th>
<th>星期五</th>
<th>星期六</th>
<th>星期日</th>
</tr>
</thead>
<tbody><tr>
<td>单词-1</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>单词-2</td>
<td>⭕</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>数据结构</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>Leetcode</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>高数</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>线性代数</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
<tr>
<td>英语句子||作文</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
<td>⭕️</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>事件</th>
<th>星期一</th>
<th>星期二</th>
<th>星期三</th>
<th>星期四</th>
<th>星期五</th>
<th>星期六</th>
<th>星期日</th>
</tr>
</thead>
<tbody><tr>
<td>单词-1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>单词-2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据结构</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Leetcode</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>高数</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>线性代数</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>英语句子||作文</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="一些图标"><a href="#一些图标" class="headerlink" title="一些图标"></a>一些图标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❌  ❗️  ⭕️  💯 ✔️ 🔗 </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>考研</category>
        <category>安排</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode数据结构数组</title>
    <url>/2022/04/22/Leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26.删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26.删除有序数组中的重复项</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote>
<p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺&gt;序 应该保持 一致 。由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个素，那么 &gt;nums 的前 k 个元素应该保存最终结果。</p>
<p>将最终结果插入 nums 的前 k 个位置后返回 k 。</p>
<p>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
</blockquote>
<p>判题标准</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="type">int</span>[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="built_in">removeDuplicates</span>(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">1</span>,<span class="number">2</span>,_]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span> ，并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span> 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>



<p>实例2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span> ， 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> 。不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcoe</category>
        <category>数据结构</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Leetcode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco Packet Tracer实验————多层交换机技术</title>
    <url>/2022/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B1%80%E5%9F%9F%E7%BD%91/%E5%AE%9E%E9%AA%8C%E4%BA%94/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大三局域网实验，使用Cisco Packer Tracer模拟软件，本篇内容为多层交换技术</p>
</blockquote>
<h1 id="Cisco-Packet-Tracer实验————多层交换技术"><a href="#Cisco-Packet-Tracer实验————多层交换技术" class="headerlink" title="Cisco Packet Tracer实验————多层交换技术"></a>Cisco Packet Tracer实验————多层交换技术</h1><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul>
<li>理解三层交换原理。</li>
<li>掌握三层交换机基本配置。</li>
<li>掌握三层交换机VLAN间转发配置。</li>
</ul>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><blockquote>
<p>三层交换机就是具有部分路由器功能的交换机，既可以工作在OSI网络标准模型的第三层（网络层）也可以工作在二层:(数据链路层)。三层交换机的最重要目的是加快大型局域网内部的数据交换，所具有的路由功能也是为这目的服务的，能够做到一次路由，多次转发。<br>   对于数据包转发等规律性的过程硬件高速实现，而像路由信息更新、路由表维护、路由计算、路由确定等功能，由软件实现。</p>
</blockquote>
<p><strong>重点：</strong> <strong>一次路由，多次转发</strong></p>
<h4 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171646650.png"></p>
<h5 id="二层交换机配置"><a href="#二层交换机配置" class="headerlink" title="二层交换机配置"></a>二层交换机配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置二层交换机S0</span></span><br><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进入全局模式</span></span><br><span class="line">vlan 10 <span class="comment"># 新建vlan 10</span></span><br><span class="line">vlan 20 <span class="comment"># 新建vlan 20 </span></span><br><span class="line">int f0/1 <span class="comment"># 进入局部模式，选择端口f0/1</span></span><br><span class="line">sw mode access <span class="comment"># 设置模式为access </span></span><br><span class="line">sw access vlan 10 <span class="comment"># 将该接口分配至 Vlan 10</span></span><br><span class="line">int f0/2 </span><br><span class="line">sw mode access</span><br><span class="line">sw access vlan 20</span><br><span class="line">int f0/3 </span><br><span class="line">sw mode trunk <span class="comment"># 设置接口f0/3为 trunk模式</span></span><br></pre></td></tr></table></figure>
<p>查看二层交换机配置情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171656786.png"></p>
<h5 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进入全局模式</span></span><br><span class="line">int G0/0 <span class="comment"># 进入局部模式，选择端口G0/0 </span></span><br><span class="line">ip address 192.168.30.1 255.255.255.0  <span class="comment"># 为端口G0/0分配IP地址</span></span><br><span class="line">no shutdown <span class="comment">#开启端口</span></span><br><span class="line">int G0/1</span><br><span class="line">ip address 192.168.40.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#回到上一层模式</span></span><br><span class="line">ip route 192.168.10.0 255.255.255.0 192.168.30.2 <span class="comment">#设置路由表，路由到192.168.10.0网段的下一跳是192.168.30.2</span></span><br><span class="line">ip route 192.168.20.0 255.255.255.0 192.168.30.2</span><br></pre></td></tr></table></figure>

<p>路由器路由表信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171705360.png"></p>
<p>路由器各个端口信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171705781.png"></p>
<h5 id="三层交换机配置"><a href="#三层交换机配置" class="headerlink" title="三层交换机配置"></a>三层交换机配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进入全局模式</span></span><br><span class="line">vlan 10 <span class="comment"># 新建vlan 10</span></span><br><span class="line">vlan 20 <span class="comment"># 新建vlan 20</span></span><br><span class="line">int f0/1 <span class="comment"># 进入局部模式，选择端口f0/1</span></span><br><span class="line">sw mode trunk <span class="comment">#选择 trunk模式</span></span><br><span class="line">sw trunk encapsulation dotlq <span class="comment">#设置端口封装协议为 dotlq</span></span><br><span class="line">int vlan 10 <span class="comment">#选择vlan 10</span></span><br><span class="line">ip address 192.168.10.1 255.255.255.0 <span class="comment">#设置IP地址</span></span><br><span class="line">no shutdown <span class="comment"># 打开端口</span></span><br><span class="line">int vlan 20</span><br><span class="line">ip address 192.168.20.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int f0/2</span><br><span class="line">no switchport <span class="comment">#关闭交换端口</span></span><br><span class="line">ip address 192.168.30.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip route 192.168.40.0 255.255.255.0 192.168.30.1 <span class="comment">#为三层交换机添加路由表</span></span><br></pre></td></tr></table></figure>

<p>三层交换机vlan信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171715268.png"></p>
<p>三层交换机路由表信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171716986.png"></p>
<p>三层交换机各个端口IP信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171915570.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171716340.png"></p>
<h4 id="连通性测试"><a href="#连通性测试" class="headerlink" title="连通性测试"></a>连通性测试</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171917227.png"></p>
<p>由上图可知，PC0与PC1和PC2是连通的，所以此事属于不同Vlan的PC0、PC1、PC2、通过三层交换机实现了通信。</p>
<h1 id="实验五结束"><a href="#实验五结束" class="headerlink" title="实验五结束"></a>实验五结束</h1>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>局域网</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>计算机网络</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco Packet Tracer实验————综合实验</title>
    <url>/2022/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B1%80%E5%9F%9F%E7%BD%91/%E5%AE%9E%E9%AA%8C%E5%85%AD/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大三局域网实验，使用Cisco Packer Tracer模拟软件，本篇内容为综合实验</p>
</blockquote>
<h1 id="Cisco-Packet-Tracer实验————综合实验"><a href="#Cisco-Packet-Tracer实验————综合实验" class="headerlink" title="Cisco Packet Tracer实验————综合实验"></a>Cisco Packet Tracer实验————综合实验</h1><p>您好，我的博客是<a href="http://buzhouge.top/">不周阁</a></p>
<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul>
<li>能结合需求分析，综合运用VLAN组网技术，设计、验证较复杂的园区网络。</li>
<li>训练面向网络工程的思维和动手能力。</li>
</ul>
<h3 id="主要配置命令"><a href="#主要配置命令" class="headerlink" title="主要配置命令"></a>主要配置命令</h3><h5 id="交换机配置命令"><a href="#交换机配置命令" class="headerlink" title="交换机配置命令"></a>交换机配置命令</h5><p><strong>vlan</strong> 参数  创建一个指定编号的vlan</p>
<p><strong>name</strong> 参数 对当前的vlan命名（改名）</p>
<p>interface 参数  进入指定接口配置模式</p>
<p><strong>switchport mode access</strong> 将当前接口的VLAN管理模式，设置为接入模式</p>
<p><strong>switchport access vlan</strong> 参数 将当前接口划分到指定的vlan中</p>
<p><strong>switchport mode trunk</strong> 将当前接口的VLAN管理模式，设置为中继模式</p>
<p><strong>switchport trunk nativie vlan</strong> 参数 设置当前接口的本征vlan属性（对中继接口有效）</p>
<p>switchport trunk allowed vlan 参数 设置当前接口能中继的vlan列表(对中继接口有效）</p>
<p><strong>interface vlan</strong> 参数 在指定的vlan上创建一个逻辑节点（接口），有两个身份，名字为VLAN加上的所在vlan的编号。 作为逻辑节点，它有自己的MAC地址、IP地址（需要设置），可以跟其它节点通信，通常用于网络管理；作为接口，用于内部配置，对于三层交换机可作为路由接口用。</p>
<p><strong>Show vlan brief</strong>  以简表形式显示设备内所划分的vlan</p>
<p><strong>Show interfaces</strong> 参数 switchport 显示指定接口的有关vlan方面的配置属性值</p>
<p><strong>Show interfaces trunk</strong> 显示当前的设备中的中继接口</p>
<h5 id="路由器子接口的创建、Vlan协议封装命令"><a href="#路由器子接口的创建、Vlan协议封装命令" class="headerlink" title="路由器子接口的创建、Vlan协议封装命令"></a>路由器子接口的创建、Vlan协议封装命令</h5><p><strong>interface</strong> 参数1.参数2 创建或进入指定路由器接口的某个子接口，参数1为某个物理接口的名称，参数2为子接口号</p>
<p><strong>encapsulation dot1q</strong> 参数 指定当前子接口使用中继协议802.1q通信、指定该接口所属的vlan</p>
<h5 id="基本配置命令"><a href="#基本配置命令" class="headerlink" title="基本配置命令"></a>基本配置命令</h5><p><strong>no</strong>  参数表 取消某操作命令，后面的参数为前面某次所执行过的命令行</p>
<p><strong>configure terminal</strong> 进入终端配置模式</p>
<p><strong>copy running-config startup-config</strong> 把内存中的配置文件保存到NVRAM 中</p>
<p><strong>enable</strong> 进入特权模式</p>
<p><strong>exit</strong> 由当前模式退出到上层模式</p>
<p><strong>end</strong>  退出到特权模式</p>
<p><strong>hostname</strong> 设置主机的名字</p>
<p><strong>interface</strong> 参数  进入指定路由器接口配置模式</p>
<p><strong>ip address</strong> 参数表  设置接口的ip地址</p>
<p><strong>no shutdown</strong>  激活网络接口</p>
<p><strong>show running-config</strong>  显示内存中的配置文件</p>
<p><strong>show interfaces</strong> 参数 显示接口的信息</p>
<p><strong>ip route</strong> 参数表   添加静态路由</p>
<p><strong>show ip route</strong>  查看路由表</p>
<p><strong>ping</strong>  参数   网络连通测试，参数为目标节点</p>
<p><strong>traceroute</strong> 参数 路由跟踪测试（对于windows主机命令为tracert），参数为目标节点</p>
<h4 id="设计任务"><a href="#设计任务" class="headerlink" title="设计任务"></a>设计任务</h4><p>为某培训机构规划设计一个网络,要求在网络层给出仿真设计。已知该机构工作场所为一个园区，有若干房间，主要用途有办公、机房、宿舍、教室，有若干电脑需要联网，需要访问因特网。目前机构内部人员（办公人员、教员）约有20人，给学员配置的主机数目约200台。</p>
<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>目标网络是局域网。采用Ethernet设备进行组网，出口设备采用传统的路由器，通过服务商连接INTERNET。内网全部用交换机作互联设备。需要划分三个VLAN用于隔离网管、办公、教学流量。鉴于目前的用户数、网络流量有限，部署一台核心交换机（三层交换机）即可。</p>
<h4 id="网络设计"><a href="#网络设计" class="headerlink" title="网络设计"></a>网络设计</h4><h4 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171830847.png"></p>
<h4 id="主机端网络配置"><a href="#主机端网络配置" class="headerlink" title="主机端网络配置"></a>主机端网络配置</h4><table>
<thead>
<tr>
<th>设置</th>
<th>IP地址</th>
<th>子网掩码</th>
<th>网关地址</th>
</tr>
</thead>
<tbody><tr>
<td>Lap0</td>
<td>192.168.2.1</td>
<td>255.255.255.0</td>
<td>192.168.2.254</td>
</tr>
<tr>
<td>Lap1</td>
<td>192.168.99.99</td>
<td>255.255.255.0</td>
<td>192.168.99.254</td>
</tr>
<tr>
<td>Lap2</td>
<td>192.168.2.3</td>
<td>255.255.255.0</td>
<td>192.168.2.254</td>
</tr>
<tr>
<td>PC0</td>
<td>192.168.3.2</td>
<td>255.255.255.0</td>
<td>192.168.3.254</td>
</tr>
<tr>
<td>PC1</td>
<td>192.168.3.4</td>
<td>255.255.255.0</td>
<td>192.168.3.254</td>
</tr>
</tbody></table>
<h4 id="配置交换机S1"><a href="#配置交换机S1" class="headerlink" title="配置交换机S1"></a>配置交换机S1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进去全局模式</span></span><br><span class="line">hostname S1 <span class="comment">#修改名字为 S1</span></span><br><span class="line">vlan 2  <span class="comment"># 创建 Vlan2</span></span><br><span class="line">int fa0/2 <span class="comment"># 进入局部设置模式，选择接口f0/2</span></span><br><span class="line">sw mode access  <span class="comment"># 选择管理方式</span></span><br><span class="line">sw access vlan 2 <span class="comment"># 给该接口划分vlan</span></span><br><span class="line">vlan 3</span><br><span class="line">int fa0/3</span><br><span class="line">sw mode access</span><br><span class="line">sw access vlan 3</span><br><span class="line">vlan 99 </span><br><span class="line">int fa0/4</span><br><span class="line">sw mode access</span><br><span class="line">sw access vlan 99</span><br><span class="line">int fa0/1</span><br><span class="line">sw mode trunk <span class="comment"># 选择管理方式</span></span><br><span class="line">sw trunk natitive vlan 99 <span class="comment"># 本征vlan</span></span><br><span class="line">sw trunk allowed vlan 2,3,99 <span class="comment"># 所属Vlan</span></span><br></pre></td></tr></table></figure>

<p>配置好查看交换机已配置的信息</p>
<p>show run</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271650870.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271652131.png"></p>
<p>查看分配的子网</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271651283.png"></p>
<p>验证中继配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271938089.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271926527.png"></p>
<p>在s0三层上的配置</p>
<p>建立vlan2、vlan3、vlan99,验证配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271932590.png"></p>
<p>配置中继接口f0&#x2F;1和f0&#x2F;2,验证中继配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271937553.png"></p>
<p>接口f0&#x2F;1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271934265.png"></p>
<p>接口f0&#x2F;2</p>
<p><img src="C:\Users\Sophon\AppData\Roaming\Typora\typora-user-images\image-20220427193930689.png" alt="image-20220427193930689"></p>
<p>在S2上的配置</p>
<p>建立vlan2、vlan3、vlan99,验证配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271943284.png"></p>
<p>配置中继接口f0&#x2F;1,验证中继配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271944245.png"></p>
<p>查看接口f0&#x2F;1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271945447.png"></p>
<p>网管节点测试</p>
<p>在S1上配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable  # 进入特权模式</span><br><span class="line">conf t  # 进入全局模式</span><br><span class="line">int vlan 99 # 进入局部设置模式，选择vlan99</span><br><span class="line">ip address 192.168.99.1 255.255.255.0 # 分配IP地址</span><br><span class="line">no shutdown # 打开端口</span><br><span class="line">ip default-gateway 192.168.99.254 # 设置网关</span><br><span class="line">line vty 0 15  # 创建16个远程访问终端</span><br><span class="line">passwd 123456  # 设置远程访问密码</span><br><span class="line">privilege level 15 # 设置管理员</span><br><span class="line">transport input telnet # 设定远程登陆可以使用的协议</span><br><span class="line">login  # 远程登陆时，开启口令</span><br></pre></td></tr></table></figure>

<p>使用子网Vlan99上的PC机Lap1，用telnet远程登陆到交换机S1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271956747.png"></p>
<p>在S2上配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable</span><br><span class="line">conf t</span><br><span class="line">int vlan 99</span><br><span class="line">ip address 192.168.99.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">ip default-gateway 192.168.99.254</span><br><span class="line">line vty 0 2</span><br><span class="line">passwd abc</span><br><span class="line">privilege level 2</span><br><span class="line">transport input telnet</span><br><span class="line">login </span><br></pre></td></tr></table></figure>

<p>使用子网Vlan99上的PC机Lap1，用telnet远程登陆到交换机S2</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204271956584.png"></p>
<p>基于三层交换路由方案</p>
<p>由核心交换机S0、出口路由器共同承担全网路由</p>
<p>R1上设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable # 进入特权模式</span><br><span class="line">conf t # 进入全局模式</span><br><span class="line">int f0/0  #  进入局部设置模式，选择端口f0/0</span><br><span class="line">ip address 192.168.4.2 255.255.255.252 # 分配IP地址</span><br><span class="line">ip routing 192.168.2.0 255.255.255.0 192.168.4.1 # 设置路由表</span><br><span class="line">ip routing 192.168.3.0 255.255.255.0 192.168.4.1</span><br><span class="line">ip routing 192.168.99.0 255.255.255.0 192.168.4.1</span><br></pre></td></tr></table></figure>

<p>S0上的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable </span><br><span class="line">ocnf t </span><br><span class="line">int vlan 2</span><br><span class="line">ip address 192.168.2.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int vlan 3</span><br><span class="line">ip address 192.168.3.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int vlan 99</span><br><span class="line">ip address 192.168.99.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">vlan 4 # 创建vlan 4</span><br><span class="line">int f0/3 </span><br><span class="line">sw mode access</span><br><span class="line">sw access vlan 4 </span><br><span class="line">int vlan 4</span><br><span class="line">ip address 192.168.4.1 255.255.255.252</span><br><span class="line">no switchport 	#关闭交换，开启路由</span><br><span class="line">ip routing 192.168.4.1 255.255.255.252</span><br></pre></td></tr></table></figure>

<p>R1 路由表</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272023867.png"></p>
<p>S0路由表</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272023068.png"></p>
<p>使用vlan2 中的Lap0 分别ping vlan3中的PC1和vlan99中的Lap1</p>
<p>Lap0 ping vlan3中的PC1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272026905.png"></p>
<p>Lap0 ping vlan99中的Lap1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272027646.png"></p>
<p>PC1 ping Lap1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272029894.png"></p>
<p>通过测试结果可知此时局域网内的各个vlan已处于连通的状态。</p>
<p>改动网络拓扑，连接一个INTERNET接入服务商路由器，完成相应的仿真。</p>
<p>该处分配网段为192.168.5.0</p>
<p>改动后的拓扑图</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272029393.png"></p>
<p>配置好之后使用PC2 ping 局域网内的主机测试连通性</p>
<p>PC2 ping Lap0 </p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272031126.png"></p>
<p>PC2 ping PC1</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204272031246.png"></p>
<h1 id="未完善先上传"><a href="#未完善先上传" class="headerlink" title="未完善先上传"></a>未完善先上传</h1>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>局域网</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>计算机网络</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco Packet Tracer实验————静态路由与动态路由</title>
    <url>/2022/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B1%80%E5%9F%9F%E7%BD%91/%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大三局域网实验，使用Cisco Packer Tracer模拟软件，本篇内容为组建虚拟局域网</p>
</blockquote>
<h1 id="Cisco-Packet-Tracer实验————组建虚拟局域网"><a href="#Cisco-Packet-Tracer实验————组建虚拟局域网" class="headerlink" title="Cisco Packet Tracer实验————组建虚拟局域网"></a>Cisco Packet Tracer实验————组建虚拟局域网</h1><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul>
<li>理解静态路由和动态路由技术。</li>
<li>掌握静态路由和默认路由配置。</li>
<li>掌握OSPF路由基本配置。</li>
</ul>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><h4 id="什么是路由？"><a href="#什么是路由？" class="headerlink" title="什么是路由？"></a>什么是路由？</h4><p>路由（routing）是指分组从源到目的地时，决定端到端路径的网络范围的进程。路由工作在OSI参考模型第三层——网络层的数据包转发设备。路由器通过转发数据包来实现网络互连。虽然路由器可以支持多种协议（如TCP&#x2F;IP、IPX&#x2F;SPX、AppleTalk等协议），但是在我国绝大多数路由器运行TCP&#x2F;IP协议。路由器通常连接两个或多个由IP子网或点到点协议标识的逻辑端口，至少拥有1个物理端口。路由器根据收到数据包中的网络层地址以及路由器内部维护的路由表决定输出端口以及下一跳地址，并且重写链路层数据包头实现转发数据包。路由器通过动态维护路由表来反映当前的网络拓扑，并通过网络上其他路由器交换路由和链路信息来维护路由表。</p>
<h4 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h4><p>静态路由（英语：Static routing），一种路由的方式，路由项由手动配置，而非动态决定。与动态路由不同，静态路由是固定的，不会改变，即使网络状况已经改变或是重新被组态。静态路由需要管理员手动配置,一般用于主机数量较少的情况。</p>
<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>动态路由是与静态路由相对的一个概念，指路由器能够根据路由器之间的交换的特定路由信息自动地建立自己的路由表，并且能够根据链路和节点的变化适时地进行自动调整。当网络中节点或节点间的链路发生故障，或存在其它可用路由时，动态路由可以自行选择最佳的可用路由并继续转发报文。动态路由使用于网络结构复杂，并且会变化的情况。</p>
<h4 id="常见动态路由协议"><a href="#常见动态路由协议" class="headerlink" title="常见动态路由协议"></a>常见动态路由协议</h4><h5 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h5><p>路由信息协议（RIP）是内部网关协议IGP中最先得到广泛使用的协议。RIP是一种分布式的基于距离向量的路由选择协议，是因特网的标准协议，其最大优点就是实现简单，开销较小。</p>
<h5 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h5><p>OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system,AS）内决策路由。</p>
<h5 id="IS-IS"><a href="#IS-IS" class="headerlink" title="IS-IS"></a>IS-IS</h5><p>IS-IS（Intermediate System-to-Intermediate System，中间系统到中间系统）路由协议最初是ISO（the International Organization for Standardization，国际标准化组织）为CLNP（Connection Less Network Protocol，无连接网络协议）设计的一种动态路由协议。</p>
<h5 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h5><p>边界网关协议（BGP）是运行于 TCP 上的一种自治系统的路由协议。BGP是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议。</p>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="静态路由-1"><a href="#静态路由-1" class="headerlink" title="静态路由"></a>静态路由</h4><h5 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h5><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171612913.png"></p>
<h5 id="路由器R0配置"><a href="#路由器R0配置" class="headerlink" title="路由器R0配置"></a>路由器R0配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进入全局模式</span></span><br><span class="line">int G0/0 <span class="comment"># 局部设置模式，选择端口G0/0</span></span><br><span class="line">ip address 192.168.1.254 255.255.255.0 <span class="comment">#为这个端口配置IP地址和子网掩码</span></span><br><span class="line">no shutdown <span class="comment"># 打开端口</span></span><br><span class="line">int G0/1</span><br><span class="line">ip address 192.168.2.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int G0/2</span><br><span class="line">ip address 192.168.5.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="comment"># 路由设置,在全局模式下</span></span><br><span class="line">ip route 192.168.3.0 255.255.255.0 192.168.5.253 <span class="comment">#此处192.168.5.253为路由器R1与路由器相连的IP地址</span></span><br><span class="line">ip route 192.168.4.0 255.255.255.0 192.168.5.253</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>路由器R1与上述路由器R0配置同。</p>
<p>R0配置后的路由表</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171600029.png"></p>
<p>R1配置后的路由表</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171600388.png"></p>
<p>此处交换机不用设置，直接设置PC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以PC0为例,其他PC机根据所处网段设置即可</span></span><br><span class="line">IP: 192.168.1.2</span><br><span class="line">NW: 255.255.255.0</span><br><span class="line">GW: 192.168.1.254</span><br></pre></td></tr></table></figure>

<h5 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h5><p>使用PC1分别ping PC2和PC4</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171601720.png"></p>
<p>如上图可知，PC1与PC2和PC4都处于连通的状态。由以上可知两个路由器的静态路由配置成功。</p>
<h4 id="动态路由-1"><a href="#动态路由-1" class="headerlink" title="动态路由"></a>动态路由</h4><h5 id="网络拓扑图-1"><a href="#网络拓扑图-1" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h5><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171617153.png"></p>
<h5 id="路由器R1配置"><a href="#路由器R1配置" class="headerlink" title="路由器R1配置"></a>路由器R1配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t <span class="comment"># 进入全局模式</span></span><br><span class="line">int G0/0 <span class="comment"># 局部设置模式，选择端口 G0/0</span></span><br><span class="line">ip address 192.168.1.254 255.255.255.0  <span class="comment">#为这个端口配置IP地址和子网掩码</span></span><br><span class="line">no shutdown <span class="comment"># 打开端口</span></span><br><span class="line">int G0/2</span><br><span class="line">ip address 192.168.4.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int G0/1</span><br><span class="line">ip adress 192.168.2.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在全局模式下</span></span><br><span class="line">router ospf 1 <span class="comment"># 运行ospf这个程序，该程序自带与路由器系统中。</span></span><br><span class="line">network 192.168.3.0 0.0.0.255 area 0 <span class="comment"># 路由器将这个网段声明出去，希望连接到这个网段</span></span><br><span class="line">network 192.168.5.0 0.0.0.255 area 0</span><br><span class="line">network 192.168.6.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>

<h5 id="R1的路由表"><a href="#R1的路由表" class="headerlink" title="R1的路由表"></a>R1的路由表</h5><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171621397.png"></p>
<p>另外两个路由器的配置与R1相同</p>
<h5 id="测试连通性-1"><a href="#测试连通性-1" class="headerlink" title="测试连通性"></a>测试连通性</h5><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171621458.png">由上图可知，PC0与PC1和PC2是连通的，从上方的路由表和PC之间的连通性可以看出路由器的动态路由已经配置成功。</p>
<h1 id="实验四结束"><a href="#实验四结束" class="headerlink" title="实验四结束"></a>实验四结束</h1>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>局域网</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>计算机网络</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco Packet Tracer实验————组建虚拟局域网</title>
    <url>/2022/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B1%80%E5%9F%9F%E7%BD%91/%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大三局域网实验，使用Cisco Packer Tracer模拟软件，本篇内容为组建虚拟局域网</p>
</blockquote>
<h1 id="Cisco-Packet-Tracer实验————组建虚拟局域网"><a href="#Cisco-Packet-Tracer实验————组建虚拟局域网" class="headerlink" title="Cisco Packet Tracer实验————组建虚拟局域网"></a>Cisco Packet Tracer实验————组建虚拟局域网</h1><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul>
<li>掌握虚拟局域网配置技术。</li>
<li>掌握VLAN的创建。</li>
<li>掌握微机Telnet到交换机、路由器的配置方法。</li>
<li>掌握配置交换机接口的Trunk。</li>
</ul>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><h4 id="Vlan特点"><a href="#Vlan特点" class="headerlink" title="Vlan特点"></a>Vlan特点</h4><ol>
<li>限制网络上的广播，将网络划分为多个VLAN可减少参与广播风暴的设备数量。VLAN分段可以防止广播风暴波及整个网络。VLAN可以提供建立防火墙的机制，防止交换网络的过量广播。</li>
<li>增强局域网的安全性，含有敏感数据的用户组可与网络的其余部分隔离，从而降低泄露机密信息的可能性。</li>
<li>借助VLAN技术，能将不同地点、不同网络、不同用户组合在一起，形成一个虚拟的网络环境，就像使用本地VLAN一样方便、灵活、有效。</li>
</ol>
<h4 id="网络设备接口重点："><a href="#网络设备接口重点：" class="headerlink" title="网络设备接口重点："></a>网络设备接口重点：</h4><ol>
<li>switchport mode access: 强制接口成为access接口，并且可以与对方主动进行协商，诱使对方成为Access模式。</li>
<li>switchport mode dynamic desirable: 主动与对协商成为Trunk接口地可能性，如果邻居接口模式为Trunk&#x2F;desirable&#x2F;auto之一，则接口将变成trunk接口工作。如果不能形成trunk模式，则工作在Access模式。这种模式是现在交换机地。</li>
<li>switchport mode dynamic auto: 只有邻居交换机主动与自己协商时才会变成Trunk接口，所以它是一种被动模式，当邻居接口为Trunk／desirable之一时，才会成为Trunk。如果不能形成trunk模式，则工作在Access模式。</li>
<li>switchport mode trunk: 强制接口成为Trunk接口，并且主动诱使对方成为Trunk模式，所以当邻居交换机接口为trunk&#x2F;desirable&#x2F;auto时会成为Trunk接口。</li>
<li>switchport nonegotiate: 严格地说，这不认为是种接口模式，它地作用只是阻止交换机接口发出DTP数据包，它必须与switchport mode trunk或者switchport mode Access一起运用。</li>
<li>switchport mode dot1q-tunnel：配置交换机接口为隧道接口（非Trunk），以便与用户交换机地Trunk接口形成不对称链路。</li>
</ol>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171053647.png"></p>
<h4 id="各PC之间的IP规划"><a href="#各PC之间的IP规划" class="headerlink" title="各PC之间的IP规划"></a>各PC之间的IP规划</h4><table>
<thead>
<tr>
<th>PC0</th>
<th>192.168.1.1</th>
<th>255.255.255.0</th>
</tr>
</thead>
<tbody><tr>
<td>PC1</td>
<td>192.168.1.2</td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>PC2</td>
<td>192.168.1.3</td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>PC3</td>
<td>192.168.1.4</td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>PC4</td>
<td>192.168.1.5</td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>PC5</td>
<td>192.168.1.6</td>
<td>255.255.255.0</td>
</tr>
</tbody></table>
<h4 id="测试PC之间的连通性。"><a href="#测试PC之间的连通性。" class="headerlink" title="测试PC之间的连通性。"></a>测试PC之间的连通性。</h4><p>下图为使用PC0 <code>ping</code>PC1和PC2,由下图可知，此时PC0与PC1和PC2是能进行通信的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171101047.png"></p>
<h4 id="Vlan划分"><a href="#Vlan划分" class="headerlink" title="Vlan划分"></a>Vlan划分</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171105123.png"></p>
<h4 id="配置交换机"><a href="#配置交换机" class="headerlink" title="配置交换机"></a>配置交换机</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span>   <span class="comment">#进入特权模式</span></span><br><span class="line">conf t   <span class="comment">#进入全局模式</span></span><br><span class="line">vlan 10  <span class="comment">#新建vlan 10</span></span><br><span class="line">name first <span class="comment">#命名为first</span></span><br><span class="line">vlan 20  <span class="comment">#新建vlan 20</span></span><br><span class="line">name second <span class="comment">#命名为second</span></span><br><span class="line">vlan 30  <span class="comment">#新建vlan 30</span></span><br><span class="line">name third  <span class="comment">#命名为third</span></span><br><span class="line"></span><br><span class="line">int f0/2  <span class="comment"># 接口设置</span></span><br><span class="line">switchport mode access <span class="comment"># 选择access模式</span></span><br><span class="line">switchport access vlan 10 <span class="comment"># 将该接口分配到vlan 10</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line">int f0/4</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 30</span><br><span class="line">int f0/1</span><br><span class="line">switchport mode trunk  <span class="comment">#trunk模式</span></span><br></pre></td></tr></table></figure>

<p>两个交换机的配置都是这样，具体有些接口不一样的地方自行修改接口名。</p>
<p>在特权模式下使用<code>show vlan</code>查看Vlan</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171217388.png"></p>
<p>上图为分别为三个交换机上的fa0&#x2F;2,fa0&#x2F;3,fa0&#x2F;4接口分配到first,second,third三个vlan上面。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204171235211.png"></p>
<p>由上图，PC1 ping不通PC2,PC1在VLAN1，PC2在VLAN2,不在同一VLNA中。PC1ping通PC4,PC1和PC2都在VLAN1内。</p>
<h1 id="实验三到此结束"><a href="#实验三到此结束" class="headerlink" title="实验三到此结束"></a>实验三到此结束</h1>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>局域网</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>计算机网络</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco Packet Tracer 实验————配置交换机</title>
    <url>/2022/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B1%80%E5%9F%9F%E7%BD%91/%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大三局域网实验，使用Cisco Packer Tracer模拟软件，本篇内容为路由器的配置</p>
</blockquote>
<h1 id="Cisco-Packet-Tracer-实验————配置交换机"><a href="#Cisco-Packet-Tracer-实验————配置交换机" class="headerlink" title="Cisco Packet Tracer 实验————配置交换机"></a>Cisco Packet Tracer 实验————配置交换机</h1><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul>
<li>辨识交换机、路由器；熟悉网络设备接口、配线架、连接器等。</li>
<li>掌握通过Console口连接交换机、路由器设备。</li>
<li>掌握微机Telnet到交换机、路由器的配置方法。</li>
<li>熟悉配置交换机的常用IOS命令。</li>
</ul>
<h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><ul>
<li>微机串口与交换机、路由器的Console口连接。</li>
<li>配置交换机、路由器允许微机Telnet权限</li>
<li>配置交换机的基本参数，检查交换机的基本参数配置。</li>
</ul>
<h3 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法"></a>实验方法</h3><ul>
<li>在Windows操作系统的计算机使用思科模拟器仿真。</li>
<li>思科交换机、路由器实际操作与配置。</li>
</ul>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>交换机的基本配置模式</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152247394.png"></p>
<ul>
<li><p>用户模式：只允许用户访问有限量的基本监视命令。用户执行模式是在从 CLI 登录到 Cisco          交换机后所进入的默认模式。在switch&gt;提示符下键入enable，交换机进入特权命           令模式。</p>
</li>
<li><p>特权模式：特权模式的提示符为“#”，允许用户访问所有设备命令，如用于配置和管理的命令， </p>
<p>​         特权执行模式可采用口令加以保护，使得只有获得授权的用户才能访问设备。</p>
</li>
<li><p>全局模式：在switch#提示符下键入configure terminal，出现提示符switch(config)#，此 </p>
<p>​         时交换机处于全局设置模式，可以设置交换机的全局参数。</p>
</li>
<li><p>接口模式：要从全局配置模式下进入接口配置模式，应输入interface接口类型插槽号&#x2F;端口号</p>
<pre><code>     命令。提示符将更改为switch(config-if)#。要退出接口配置模式，使用exit命          令。提示符恢复为switch (config)#，要退出全局配置模式，可以再次使用exit          命令。提示符切换为#，回到特权执行模式。进入以太网接口fastethernet0/1的命         令是`interface fastethernet 0/1`。
</code></pre>
</li>
</ul>
<h4 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h4><p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152252424.png"></p>
<h4 id="交换机属性配置"><a href="#交换机属性配置" class="headerlink" title="交换机属性配置"></a>交换机属性配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span>  <span class="comment"># 进入特权模式</span></span><br><span class="line">conf t  <span class="comment"># 进入全局模式</span></span><br><span class="line">hostname S1 <span class="comment"># 设置交换机的名字为S1</span></span><br><span class="line"><span class="built_in">enable</span> pass 123 <span class="comment"># 设置使能密码为 123</span></span><br><span class="line">line vty 0 4  <span class="comment"># 创建5个远程登录终端line</span></span><br><span class="line">line con 0    <span class="comment"># 创建con远程登录终端line</span></span><br><span class="line">login         <span class="comment"># 允许远程登录</span></span><br><span class="line">pass 123      <span class="comment"># 设置远程登录的口令为 123</span></span><br><span class="line">login         <span class="comment"># 运行远程登录</span></span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152256696.png"></p>
<h4 id="交换机IP地址的管理和配置"><a href="#交换机IP地址的管理和配置" class="headerlink" title="交换机IP地址的管理和配置"></a>交换机IP地址的管理和配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int vlan 1 <span class="comment"># 进入vlan 1局部设置模式</span></span><br><span class="line">ip address 192.168.1.1 255.255.255.0 <span class="comment"># 设置端口IP地址和子网掩码</span></span><br><span class="line">no shutdown <span class="comment">#端口默认是关闭的，开启端口</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152258400.png"></p>
<h4 id="交换机端口属性配置"><a href="#交换机端口属性配置" class="headerlink" title="交换机端口属性配置"></a>交换机端口属性配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int fa0/1 <span class="comment"># 进入端口 f0/1局部设置模式</span></span><br><span class="line">duplex auto <span class="comment"># 设置工作方式为auto</span></span><br><span class="line">speed auto  <span class="comment"># 设置速度为auto</span></span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152259786.png"></p>
<h4 id="Tenet远程登陆"><a href="#Tenet远程登陆" class="headerlink" title="Tenet远程登陆"></a>Tenet远程登陆</h4><p>如果出现以下错误可能是line console 0 为设置密码，重新回去设置密码即可。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152301004.png"></p>
<p>重新设置密码后成功远程登陆</p>
<p><img src="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204152302259.png"></p>
<h1 id="实验二到此结束"><a href="#实验二到此结束" class="headerlink" title="实验二到此结束"></a>实验二到此结束</h1>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>局域网</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>计算机网络</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员C++笔记(一)</title>
    <url>/2022/04/10/C++/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C++/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>​    这是我之前学习<a href="https://www.bilibili.com/video/BV1et411b73Z?from=search&seid=2830278965028808086&spm_id_from=333.337.0.0">黑马程序员C++</a>教学视频的笔记，现在上传上来，后续不确定是否上传。</p>
</blockquote>
<h1 id="黑马程序员"><a href="#黑马程序员" class="headerlink" title="黑马程序员"></a>黑马程序员</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout&lt;&lt;输出</span><br><span class="line">std::endl&lt;&lt;换行</span><br><span class="line">   (<span class="type">int</span>)变量<span class="comment">//强制转换类型</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>




</blockquote>
<h3 id="1-4常量"><a href="#1-4常量" class="headerlink" title="1.4常量"></a>1.4常量</h3><p>C++中定义常量的方法：</p>
<blockquote>
<ol>
<li><p>#define 常量 数值 &#x2F;&#x2F;宏定义，宏常量</p>
</li>
<li><p>const int&#x2F;char… 常量 &#x3D; 数值  &#x2F;&#x2F;const修饰的变量也是常量</p>
</li>
</ol>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//宏常量，不可修改</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Day 7</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Day = 7; error</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;A week have &quot;</span> &lt;&lt; Day&lt;&lt;<span class="string">&quot; day&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> month = <span class="number">12</span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;A year have &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; month&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="comment">//month = 24; error</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="1-5关键字"><a href="#1-5关键字" class="headerlink" title="1.5关键字"></a>1.5关键字</h3><p>关键字系统已经定义了，定义变量时不能使用。</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody></table>
<h3 id="1-6-标识符命名规制"><a href="#1-6-标识符命名规制" class="headerlink" title="1.6 标识符命名规制"></a>1.6 标识符命名规制</h3><blockquote>
<p>C++标识符（变量and常量）命名规则</p>
<ul>
<li>标识符不能使用关键字</li>
<li>标识符只能有字母、数字和下划线组成</li>
<li>第一个字符必须由字母或下划线组成</li>
<li>标识符中区分大小写</li>
</ul>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><blockquote>
<p>语法：数据类型 + 变量名 + 变量初值</p>
<p>数据类型的意义：给变量分配合理的内存空间</p>
</blockquote>
<h3 id="2-1整型"><a href="#2-1整型" class="headerlink" title="2.1整型"></a>2.1整型</h3><p><strong>作用</strong>：表示整数类型的变量</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)&#x2F;&#x2F;-32768-32767</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)  &#x2F;&#x2F;-2147483648～2147483647</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)&#x2F;&#x2F;-2147483648～2147483647</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)最大9223372036854775807</td>
</tr>
</tbody></table>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><blockquote>
<p><strong>作用</strong>：统计数据类型所占内存大小 </p>
<p><strong>语法</strong>：sizeof(数据类型&#x2F;变量)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">short</span> num1 = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;var num1 occupied memory space &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(num1) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// num1/short occupied memory space 2 byte</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2 = <span class="number">10000000000000000</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;var num1 occupied memory space &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(num2) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// num2/short occupied memory space 8 byte</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="2-3实型（浮点型）"><a href="#2-3实型（浮点型）" class="headerlink" title="2.3实型（浮点型）"></a>2.3实型（浮点型）</h3><blockquote>
<p><strong>作用</strong>：表示小数</p>
<p>两种类型：</p>
<ol>
<li>单精度float<br>2. 双精度double</li>
</ol>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td><em><strong>7位有效数字</strong></em></td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td><em><strong>15～16位有效数字</strong></em></td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//默认打印6位有效数字</span></span><br><span class="line">	<span class="type">float</span> f1 = <span class="number">3.14f</span>;<span class="comment">//如果不加f默认为double类型</span></span><br><span class="line">	std::cout &lt;&lt; f1 &lt;&lt; std::endl;</span><br><span class="line">	<span class="type">double</span> f2 = <span class="number">3.1415926</span>;</span><br><span class="line">	std::cout &lt;&lt; f2 &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;occupied memory space &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; <span class="string">&quot; in f1 &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(f2)&lt;&lt;<span class="string">&quot; in f2 &quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="type">float</span> f3 = <span class="number">3e2</span>;<span class="comment">//3*10^2</span></span><br><span class="line">	std::cout &lt;&lt; f3 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> f4 = <span class="number">3e-2</span>;<span class="comment">//3*0.1^2</span></span><br><span class="line">	std::cout &lt;&lt; f4 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="2-4字符型"><a href="#2-4字符型" class="headerlink" title="2.4字符型"></a>2.4字符型</h3><blockquote>
<p><strong>作用：</strong>显示单个字符</p>
<p><strong>语法：</strong>char ch &#x3D; ‘a’;</p>
<ul>
<li>单引号</li>
<li>单引号内只能有一个字符</li>
</ul>
<p>字符型变量只占一个字节</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;ch value is &quot;</span>&lt;&lt; ch &lt;&lt; <span class="string">&quot;,ch occupied memory space &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(ch) &lt;&lt; <span class="string">&quot; byte&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制转换类型</span></span><br><span class="line">std::cout &lt;&lt;<span class="string">&quot;ch ASCII is &quot;</span> &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p>ASCII码表格：</p>
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>&#x2F;</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>&#x2F;</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>&#x3D;</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>&#96;</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<h3 id="2-5转义字符"><a href="#2-5转义字符" class="headerlink" title="2.5转义字符"></a>2.5转义字符</h3><blockquote>
<p><strong>作用</strong>：用于表示不能显示的ASCII字符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="comment">//水平指标符 /t</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aa\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aaa\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aaaa\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aaaaa\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aaaaaaa\thello\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aaaaaaaa\thello\n&quot;</span>;<span class="comment">//一个水平制表符占8个空格位置</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>*<em>\\*</em></td>
<td><strong>代表一个反斜线字符”&quot;</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<h3 id="2-6字符串型"><a href="#2-6字符串型" class="headerlink" title="2.6字符串型"></a>2.6字符串型</h3><blockquote>
<p><strong>作用</strong>：表示一串字符</p>
<p>两种类型:</p>
<ol>
<li>C语言风格：<code> char str[] = &quot;value&quot;</code></li>
</ol>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	std::cout &lt;&lt; str1 &lt;&lt; std::endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>双引号</li>
</ol>
</blockquote>
<ol start="2">
<li>C++风格：string str &#x3D; “value”</li>
</ol>
<ul>
<li>与C语言内字符书写一样，string类型</li>
</ul>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::string str1 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">	std::cout &lt;&lt; str1 &lt;&lt; std::endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>添加头文件<code>#include&lt;string&gt;</code></li>
<li>注意书写std,C++的命令需要std,例如std::cout,std::cin,std::string</li>
</ol>
</blockquote>
</blockquote>
<h3 id="2-7-bool类型"><a href="#2-7-bool类型" class="headerlink" title="2.7 bool类型"></a>2.7 bool类型</h3><blockquote>
<p><strong>作用</strong>：表示真假</p>
<p>bool类型只有两个值：</p>
<p>​                true:1</p>
<p>​                false:0</p>
<blockquote>
<ul>
<li>任何非0整数都是1；</li>
<li>输入字符是假</li>
</ul>
</blockquote>
<p>bool类型只占用一个字节</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">std::cout&lt;&lt;flag&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(flag) &lt;&lt; std::endl;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">std::cout &lt;&lt; flag &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(flag) &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="2-8数据的输入"><a href="#2-8数据的输入" class="headerlink" title="2.8数据的输入"></a>2.8数据的输入</h3><blockquote>
<p><strong>作用</strong>：从键盘获取数据</p>
<p>用法：std::cin &gt;&gt; ;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入a的值:&quot;</span> ;</span><br><span class="line">std::cin &gt;&gt; a;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//浮点型</span></span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入f的值:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; f;</span><br><span class="line">std::cout &lt;&lt; f &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//字符型</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入ch的值&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; ch;</span><br><span class="line">std::cout &lt;&lt; ch &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line">std::string str;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入str的值&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; str;</span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//bool型</span></span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入flag的值：&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; flag;</span><br><span class="line">std::cout &lt;&lt; flag &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><h3 id="3-1算数运算符"><a href="#3-1算数运算符" class="headerlink" title="3.1算数运算符"></a>3.1算数运算符</h3><blockquote>
<p><strong>作用</strong>：用于四则运算</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除</td>
<td>10 &#x2F; 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a&#x3D;2; b&#x3D;++a;</td>
<td>a&#x3D;3; b&#x3D;3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a&#x3D;2; b&#x3D;a++;</td>
<td>a&#x3D;3; b&#x3D;2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a&#x3D;2; b&#x3D;–a;</td>
<td>a&#x3D;1; b&#x3D;1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a&#x3D;2; b&#x3D;a–;</td>
<td>a&#x3D;1; b&#x3D;2;</td>
</tr>
</tbody></table>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//加减乘除</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数可以相除</span></span><br><span class="line"><span class="type">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">cout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除法注意点：</p>
<ul>
<li>整型进行除法，结果会直接舍掉小数位</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//取模运算</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">std::cout &lt;&lt; a1 % <span class="number">3</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>取模运算就是求余数</li>
<li>两个数取模是基于除法，所以被除数不能为0</li>
<li>小数不能进行取模运算</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//递增和递减运算符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><blockquote>
<p><strong>作用：</strong>给变量赋值</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>a&#x3D;2; b&#x3D;3;</td>
<td>a&#x3D;2; b&#x3D;3;</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>加等于</td>
<td>a&#x3D;0; a+&#x3D;2;</td>
<td>a&#x3D;2;</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减等于</td>
<td>a&#x3D;5; a-&#x3D;3;</td>
<td>a&#x3D;2;</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘等于</td>
<td>a&#x3D;2; a*&#x3D;2;</td>
<td>a&#x3D;4;</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除等于</td>
<td>a&#x3D;4; a&#x2F;&#x3D;2;</td>
<td>a&#x3D;2;</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>模等于</td>
<td>a&#x3D;3; a%2;</td>
<td>a&#x3D;1;</td>
</tr>
</tbody></table>
<blockquote>
<p>int main() {</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// =</span></span><br><span class="line">&gt;<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">&gt;a = <span class="number">100</span>;</span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// +=</span></span><br><span class="line">&gt;a = <span class="number">10</span>;</span><br><span class="line">&gt;a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// -=</span></span><br><span class="line">&gt;a = <span class="number">10</span>;</span><br><span class="line">&gt;a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// *=</span></span><br><span class="line">&gt;a = <span class="number">10</span>;</span><br><span class="line">&gt;a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// /=</span></span><br><span class="line">&gt;a = <span class="number">10</span>;</span><br><span class="line">&gt;a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// %=</span></span><br><span class="line">&gt;a = <span class="number">10</span>;</span><br><span class="line">&gt;a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">&gt;cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>}</p>
</blockquote>
<h3 id="3-3比较运算符"><a href="#3-3比较运算符" class="headerlink" title="3.3比较运算符"></a>3.3比较运算符</h3><blockquote>
<p><strong>作用</strong>：用于表达式之间的比较，返回一个真或假的值</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>相等于</td>
<td>4 &#x3D;&#x3D; 3</td>
<td>0</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不等于</td>
<td>4 !&#x3D; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
<td>4 &lt;&#x3D; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
<td>4 &gt;&#x3D; 1</td>
<td>1</td>
</tr>
</tbody></table>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-4逻辑运算符"><a href="#3-4逻辑运算符" class="headerlink" title="3.4逻辑运算符"></a>3.4逻辑运算符</h3><blockquote>
<p><strong>作用</strong>：根据表达式的值返回真值或假值</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !a &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !!a &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><blockquote>
<p>C&#x2F;C++支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构<br>+顺序结构：程序按顺序执行，不发生跳转<br>+选择结构：判断条件是否满足，选择对应的程序执行<br>+循环结构：判断条件是否满足，多次循环执行某一段代码</p>
</blockquote>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="1-if结构"><a href="#1-if结构" class="headerlink" title="1.if结构"></a>1.if结构</h4><blockquote>
<p>if语句</p>
<p>1:if</p>
<p>2:if…else</p>
<p>3:if…else if</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//单if语句</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入你的分数:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;一本大学&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//if...else结构</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入你的分数:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;一本&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;没有考上一本大学&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//if...else if结构</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入你的分数:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;清华&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;一本&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;没有考上一本&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//if嵌套</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;输入你的分数:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;清华&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;普通一本&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;二本&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout&lt;&lt;<span class="string">&quot;三本&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;未考上本科&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-案例练习-三只小猪称体重"><a href="#2-案例练习-三只小猪称体重" class="headerlink" title="2.案例练习 三只小猪称体重"></a>2.案例练习 三只小猪称体重</h4><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="https://cdn.jsdelivr.net/gh/Sophon3/Figure-bed/images2021/2021202110281311989.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">float</span> pig1, pig2,pig3;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;输入三只小猪的重量&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;please input the pig1 weight:&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; pig1;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;please input the pig2 weight:&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; pig2;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;please input the pig3 weight:&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; pig3;</span><br><span class="line">	<span class="keyword">if</span>(pig1 &gt; pig2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (pig1 &gt; pig3)</span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;pig1 is  the heaviest&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;pig2 is the heaviest&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (pig2 &gt; pig3)</span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;pig2 is the heavest&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;pig3 is the  heavest&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-三目运算符"><a href="#3-三目运算符" class="headerlink" title="3.三目运算符"></a>3.三目运算符</h4><blockquote>
<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>例子</strong>：a &gt; b ? a:b</p>
<p>如果a大于b,返回a,否则返回b</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">c = (a &gt; b ? a : b);</span><br><span class="line"><span class="comment">//三目运算符返回的是一个变量，接下来还能继续赋值</span></span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;c的值：&quot;</span> &lt;&lt; c &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="4-switch语句"><a href="#4-switch语句" class="headerlink" title="4.switch语句"></a>4.switch语句</h3><blockquote>
<p><strong>作用</strong>：执行多条件分支语句</p>
<p><strong>语法</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">switch</span>(表达式)</span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="keyword">case</span> 结果<span class="number">1</span> :执行语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 结果<span class="number">2</span> :执行语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 结果<span class="number">3</span> :执行语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">       .</span><br><span class="line">       .</span><br><span class="line">       .</span><br><span class="line">   <span class="keyword">default</span>: 执行语句;<span class="keyword">break</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//switch</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请给电影打分(0-10):&quot;</span>;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">std::cin &gt;&gt; score;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;这个电影的分数是：&quot;</span> &lt;&lt; score &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">switch</span> (score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; std::endl; <span class="keyword">break</span>;<span class="comment">//退出当前分支</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;还行&quot;</span> &lt;&lt; std::endl; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;好看&quot;</span> &lt;&lt; std::endl; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; std::endl; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; std::endl; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>if和siwtch区别</p>
<ul>
<li>if能判断范围</li>
<li>switch结构更加清晰</li>
<li>switch效率更高</li>
</ul>
</blockquote>
<blockquote>
<p><strong>注意</strong>:</p>
<ul>
<li>switch的表达式类型只能是整型或者字符型</li>
</ul>
</blockquote>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="1-while循环语句"><a href="#1-while循环语句" class="headerlink" title="1.while循环语句"></a>1.while循环语句</h4><blockquote>
<p><strong>作用</strong>：满足循环条件，执行循环语句</p>
<p><strong>语法</strong>：<code>while (条件) &#123;循环语句&#125;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">num++;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">	num++;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>while循环需要提供一个循环出口，避免进入死循环</p>
</blockquote>
</blockquote>
<h5 id="案例：猜数字"><a href="#案例：猜数字" class="headerlink" title="案例：猜数字"></a>案例：猜数字</h5><blockquote>
<blockquote>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="comment">//生成随机数</span></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">rand</span>() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;随机数猜测&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (val != num) <span class="comment">//方式1，直接在while中添加循环条件</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;请输入你的猜测：&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; val;</span><br><span class="line">	<span class="keyword">if</span> (val &lt; num)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;你猜测的过小了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (val == num)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;你猜对了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (val &gt; num)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;你猜测的过大了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;*******************************************</span></span><br><span class="line"><span class="comment">&gt;方式2</span></span><br><span class="line"><span class="comment">while (1) //方式2,使用while死循环开始，在循环之中添加break;可退出循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	std::cout &lt;&lt; &quot;请输入你的猜测：&quot;;</span></span><br><span class="line"><span class="comment">	std::cin &gt;&gt; val;</span></span><br><span class="line"><span class="comment">	if (val &lt; num)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		std::cout &lt;&lt; &quot;你猜测的过小了&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else if (val == num)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		std::cout &lt;&lt; &quot;你猜对了&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">		break;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else if (val &gt; num)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		std::cout &lt;&lt; &quot;你猜测的过大了&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&gt;********************************************</span></span><br><span class="line"><span class="comment">&gt;*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成随机数</p>
<p>rand()%100  &#x2F;&#x2F;这个可以生成一个随机数，但是是伪随机，所以每次生成的随机数都是41</p>
<p>这个时候可以添加一个随机数种子，利用系统时间来生成随机数，防止每一次随机数都一样</p>
<p>srand((unsigned int)time(NULL))</p>
<p>使用这个需要包含一个系统时间头文件#include<ctime>。</p>
<p><code>srand((unsigned int)time(NULL));    int num = rand() % 100 + 1;</code></p>
</blockquote>
</blockquote>
<h4 id="2-do…while循环语句"><a href="#2-do…while循环语句" class="headerlink" title="2. do…while循环语句"></a>2. do…while循环语句</h4><blockquote>
<p><strong>作用</strong>：与while相同，只是先执行一次循环</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">	num++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span> (num &lt;<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="案例练习-：水仙花数"><a href="#案例练习-：水仙花数" class="headerlink" title="案例练习 ：水仙花数"></a>案例练习 ：水仙花数</h5><blockquote>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 &#x3D; 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c;</span><br><span class="line">	a = num % <span class="number">10</span>;<span class="comment">//取个位</span></span><br><span class="line">	b = num / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//取十位</span></span><br><span class="line">	c = num / <span class="number">100</span>;<span class="comment">//取百位</span></span><br><span class="line">	<span class="keyword">if</span> ( <span class="built_in">pow</span>(a,<span class="number">3</span>) + <span class="built_in">pow</span>(b, <span class="number">3</span>) + <span class="built_in">pow</span>(c, <span class="number">3</span>) == num)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	num++;</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>求指数函数：pow(底数，指数)&#x2F;&#x2F;需要包含cmath头文件。</p>
</blockquote>
</blockquote>
<h4 id="3-for循环结构"><a href="#3-for循环结构" class="headerlink" title="3. for循环结构"></a>3. for循环结构</h4><blockquote>
<p><strong>作用</strong>：满足循环条件，执行循环语句</p>
<p><strong>语法</strong>：for(起始表达式;条件表达式;末尾循环体){循环语句}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">	num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="案例练习：敲桌子"><a href="#案例练习：敲桌子" class="headerlink" title="案例练习：敲桌子"></a>案例练习：敲桌子</h5><blockquote>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">7</span> || i / <span class="number">10</span> % <span class="number">10</span> == <span class="number">7</span> || i % <span class="number">7</span> == <span class="number">0</span>)<span class="comment">//条件判断</span></span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;敲桌子&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="4-嵌套循环"><a href="#4-嵌套循环" class="headerlink" title="4.嵌套循环"></a>4.嵌套循环</h4><blockquote>
<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>




</blockquote>
<h5 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h5><blockquote>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; i * j &lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1. break语句"></a>1. break语句</h4><blockquote>
<blockquote>
<p>作用:跳出 选择结构 或 循环结构 </p>
</blockquote>
<ul>
<li>跳出switch语句</li>
<li>结束循环语句</li>
<li>当有多层循环时，结束内层循环</li>
</ul>
</blockquote>
<h4 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2. continue语句"></a>2. continue语句</h4><blockquote>
<p><strong>作用</strong>：在一个循环语句中，结束本次循环，继续后面的循环</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-goto语句"><a href="#3-goto语句" class="headerlink" title="3.goto语句"></a>3.goto语句</h4><blockquote>
<p><strong>作用：</strong>可以无条件跳转语句  (汇编的标识）&#x2F;&#x2F;尽量少使用</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&gt;FLAG:</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="5-数组（Array）"><a href="#5-数组（Array）" class="headerlink" title="5 数组（Array）"></a>5 数组（Array）</h2><blockquote>
<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D;</p>
<p><strong>特点2：</strong>数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的</p>
</blockquote>
<h3 id="5-1一维数组"><a href="#5-1一维数组" class="headerlink" title="5.1一维数组"></a>5.1一维数组</h3><h4 id="1-1-一维数组定义方式"><a href="#1-1-一维数组定义方式" class="headerlink" title="1.1 一维数组定义方式"></a>1.1 一维数组定义方式</h4><blockquote>
<h4 id="三种定义方式："><a href="#三种定义方式：" class="headerlink" title="三种定义方式："></a>三种定义方式：</h4><ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr1[<span class="number">10</span>];</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;arr1第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个：&quot;</span> &lt;&lt; arr1[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> arr2[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt;<span class="string">&quot;arr2第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个：&quot;</span> &lt;&lt; arr2[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> arr3[] = &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;arr3第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个：&quot;</span> &lt;&lt; arr3[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意int数组没有赋初值,打印出来会是-858993460,具体<a href="https://blog.csdn.net/huijiaaa1/article/details/89361230">可见</a>,这个涉及编译器和汇编</p>
<ul>
<li>定义数组的时候，必须定义数组的长度，可以直接定义长度，也能通过赋值方式让系统自动伪他定义长度。</li>
</ul>
</blockquote>
</blockquote>
<h4 id="1-2一维数组组名"><a href="#1-2一维数组组名" class="headerlink" title="1.2一维数组组名"></a>1.2一维数组组名</h4><blockquote>
<p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">12</span>,<span class="number">123</span>,<span class="number">1234</span>,<span class="number">12345</span> &#125;;</span><br><span class="line">std::cout &lt;&lt; arr &lt;&lt; std::endl;<span class="comment">//查看数组首地址</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; std::endl;<span class="comment">//整个数组占用的内存空间</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; std::endl;<span class="comment">//查看数组某个单元占用的内存</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)arr &lt;&lt; std::endl;<span class="comment">//查看首地址，int为10进制</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组首地址是一个常量，不可修改</p>
</blockquote>
</blockquote>
<h5 id="案例练习-1-五只小猪称体重"><a href="#案例练习-1-五只小猪称体重" class="headerlink" title="案例练习 1.五只小猪称体重"></a>案例练习 1.五只小猪称体重</h5><blockquote>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] &#x3D; {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">300</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">250</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr_length = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ser;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr_length; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(arr[i]&gt;max)</span><br><span class="line">	&#123;</span><br><span class="line">		max = arr[i];</span><br><span class="line">		ser = i+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;ser&lt;&lt; <span class="string">&quot;只小猪最重，为：&quot;</span> &lt;&lt; max;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>案例练习 2.数组元素逆置</p>
<blockquote>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.               </p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">7</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr_length = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> arr_end = arr_length<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;arr_end; i++)</span><br><span class="line">&#123;</span><br><span class="line">	temp = arr[i];</span><br><span class="line">	arr[i] = arr[arr_end];</span><br><span class="line">	arr[arr_end] = temp;</span><br><span class="line">	arr_end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr_length; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; arr[i]&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关注点数组前后置换过程种，</p>
</blockquote>
</blockquote>
<h4 id="1-3冒泡排序"><a href="#1-3冒泡排序" class="headerlink" title="1.3冒泡排序"></a>1.3冒泡排序</h4><blockquote>
<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<blockquote>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr_len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> temp;<span class="comment">//中转数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr_len<span class="number">-1</span>; i++)<span class="comment">//循环数组长度-1</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; arr_len -i<span class="number">-1</span> ; j++)<span class="comment">//比较次数为数组长度-1-已循环次数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			temp = arr[j];   <span class="comment">//数组相联两数交换</span></span><br><span class="line">			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr_len; i++)<span class="comment">//打印数组</span></span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; arr[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="5-2二维数组"><a href="#5-2二维数组" class="headerlink" title="5.2二维数组"></a>5.2二维数组</h3><h4 id="2-1二维数组定义方式"><a href="#2-1二维数组定义方式" class="headerlink" title="2.1二维数组定义方式"></a>2.1二维数组定义方式</h4><blockquote>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">arr1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr1[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr1[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr1[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; arr1[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; arr2[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; arr3[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span> &#125;;<span class="comment">//可以给出列数，省略函数，系统能自动判断。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式而最常用，也最直观，可读性更强。</p>
</blockquote>
</blockquote>
<h4 id="2-2-二维数组名"><a href="#2-2-二维数组名" class="headerlink" title="2.2 二维数组名"></a>2.2 二维数组名</h4><blockquote>
<ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;首地址&quot;</span> &lt;&lt; arr &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;数组大小&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;一行占用内存&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;某个元素占用内存&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;二维数组行数&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;二维数组列数&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="案例练习-1"><a href="#案例练习-1" class="headerlink" title="案例练习"></a>案例练习</h5><blockquote>
<p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">	&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">	&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">	&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">std::string names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line">std::string subject[<span class="number">3</span>] = &#123;<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;英语&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; names[i] &lt;&lt; subject[j] &lt;&lt; <span class="string">&quot;成绩&quot;</span> &lt;&lt; scores[i][j] &lt;&lt; std::endl;</span><br><span class="line">		num +=scores[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;总分:&quot;</span> &lt;&lt; num &lt;&lt; std::endl &lt;&lt; std::endl;</span><br><span class="line">	num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1概述"><a href="#6-1概述" class="headerlink" title="6.1概述"></a>6.1概述</h3><blockquote>
<p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
</blockquote>
<h3 id="6-2函数的定义"><a href="#6-2函数的定义" class="headerlink" title="6.2函数的定义"></a>6.2函数的定义</h3><blockquote>
<h5 id="第一函数的步骤："><a href="#第一函数的步骤：" class="headerlink" title="第一函数的步骤："></a>第一函数的步骤：</h5><ol>
<li>返回值类型 (一个函数可以返回一个值，在函数定义中)</li>
<li>函数名 (给函数起一个名字)</li>
<li>参数列表 (使用该函数时，传入的数据)</li>
<li>函数体语句 (花括号内的代码，该函数内需要执行的语句)</li>
<li>return 表达式 (返一个值，返回值的类型与函数定义的返回值类型有关)</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;返回值类型 函数名 （参数列表）</span><br><span class="line">&gt;&#123;</span><br><span class="line"></span><br><span class="line">     函数体语句</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">add</span>(a, b);<span class="comment">//函数调用，a和b为实参</span></span><br><span class="line">std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span><span class="comment">//函数定义,num1和num2为形参</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line">sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="6-3函数的调用"><a href="#6-3函数的调用" class="headerlink" title="6.3函数的调用"></a>6.3函数的调用</h3><blockquote>
<p>能：**使用定义好的函数</p>
<p><strong>语法：</strong><code> 函数名（参数）</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;同上</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="6-4值传递"><a href="#6-4值传递" class="headerlink" title="6.4值传递"></a>6.4值传递</h3><blockquote>
<ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D;</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main中a的值&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main中b的值&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;swap中a的值&quot;</span> &lt;&lt; num1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;swap中b的值&quot;</span> &lt;&lt; num2 &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="6-5-函数常见的样式"><a href="#6-5-函数常见的样式" class="headerlink" title="6.5 函数常见的样式"></a>6.5 函数常见的样式</h3><blockquote>
<p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//函数常见样式</span></span><br><span class="line">&gt;<span class="comment">//1、 无参无返</span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//test01(); 函数调用</span></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//2、 有参无返</span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//3、无参有返</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//4、有参有返</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">test04</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> sum = a + b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="6-6函数的声明"><a href="#6-6函数的声明" class="headerlink" title="6.6函数的声明"></a>6.6函数的声明</h3><blockquote>
<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line">&gt;<span class="comment">//声明</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">&gt;<span class="comment">//定义</span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="6-7函数分文件编写"><a href="#6-7函数分文件编写" class="headerlink" title="6.7函数分文件编写"></a>6.7函数分文件编写</h3><blockquote>
<p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//swap.h</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span><span class="comment">//string类型需要该头文件</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//swap.cpp</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;swap中a的值&quot;</span> &lt;&lt; num1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;swap中b的值&quot;</span> &lt;&lt; num2 &lt;&lt; std::endl;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//main.cpp</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main中a的值&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main中b的值&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1指针的概念"><a href="#7-1指针的概念" class="headerlink" title="7.1指针的概念"></a>7.1指针的概念</h3><blockquote>
<p>**指针的作用</p>
<p><strong>：</strong> 可以通过指针间接访问<em><strong>内存</strong></em></p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针变量保存地址</li>
</ul>
</blockquote>
<h3 id="7-2指针变量的定义和使用"><a href="#7-2指针变量的定义和使用" class="headerlink" title="7.2指针变量的定义和使用"></a>7.2指针变量的定义和使用</h3><blockquote>
<p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="普通变量和指针变量的区别"><a href="#普通变量和指针变量的区别" class="headerlink" title="普通变量和指针变量的区别"></a>普通变量和指针变量的区别</h4><ul>
<li>普通变量存放的是数据，指针变量存储的是地址</li>
<li>指针变量可以通过 * 操作数，操作指针变量指向的内存空间，这个过程称为引用</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>通过&amp;符号 获取变量的地址</li>
<li>指针可以记录地址</li>
<li>对指针变量解引用，可以操作指针指向的内存</li>
<li></li>
</ul>
</blockquote>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><blockquote>
<p>指针这种数据结构所占用的内存空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl; <span class="comment">//* 解引用</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>*) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>*) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>*) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>x86 </p>
<p><img src="https://cdn.jsdelivr.net/gh/Sophon3/Figure-bed/images2021/2021202111011115825.png"></p>
<p>x64</p>
<p><img src="https://cdn.jsdelivr.net/gh/Sophon3/Figure-bed/images2021/2021202111011114060.png"></p>
<p>指针类型在64位系统中占用8字节，在32位系统中，占4字节</p>
</blockquote>
<h3 id="7-4空指针和野指针"><a href="#7-4空指针和野指针" class="headerlink" title="7.4空指针和野指针"></a>7.4空指针和野指针</h3><blockquote>
<p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">std::cout &lt;&lt; *p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>空指针不能被访问，会报错</p>
<p><img src="C:\Users\Quer\AppData\Roaming\Typora\typora-user-images\image-20211101112618582.png" alt="image-20211101112618582"></p>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line"><span class="type">int</span> * p = (<span class="type">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问野指针报错 </span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><blockquote>
<ol>
<li>const修饰指针   — 常量指针</li>
<li>const修饰常量   — 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = &amp;a;<span class="comment">//指针常量,指针指向的值不能修改，指针的指向可以修改</span></span><br><span class="line"><span class="comment">// *p = 20;  错误，指针指向的值不能修改</span></span><br><span class="line">p = &amp;b;<span class="comment">//正确，指针的指向可以修改。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p2 = &amp;a;<span class="comment">//指针常量，指针指向的值可以修改，但是指针的指向不能修改</span></span><br><span class="line">*p2 = <span class="number">20</span>;<span class="comment">//正确，指针指向的值可以修改</span></span><br><span class="line"><span class="comment">//p2 = &amp;b;  //错误，指针的指向不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p3 = &amp;a;<span class="comment">//此时指针的指向和指向的值都不能修改</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="7-6指针和数组"><a href="#7-6指针和数组" class="headerlink" title="7.6指针和数组"></a>7.6指针和数组</h3><blockquote>
<p><strong>作用：</strong>利用指针访问数组中元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;<span class="comment">//数组名就是数组的首地址</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;第一个元素为：&quot;</span> &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">p++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;下一个元素为：&quot;</span> &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="7-7指针和函数"><a href="#7-7指针和函数" class="headerlink" title="7.7指针和函数"></a>7.7指针和函数</h3><blockquote>
<p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>*, <span class="type">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a的值为：&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; ,b的值为：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">swap</span>(&amp;a, &amp;b);<span class="comment">//地址传递</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a的值为：&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; ,b的值为：&quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* p1, <span class="type">int</span>* p2)</span><span class="comment">//通过接收原变量的地址，可以修改main函数的值</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = temp;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><blockquote>
<p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span>*, <span class="type">int</span>)</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Display_arr</span><span class="params">(<span class="type">int</span>*, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr_len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">Display_arr</span>(arr, arr_len);</span><br><span class="line"><span class="built_in">BubbleSort</span>(arr, arr_len);</span><br><span class="line"><span class="built_in">Display_arr</span>(arr, arr_len);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			temp = arr[j];</span><br><span class="line">			arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">			arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Display_arr</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="8-1结构体的基本概念"><a href="#8-1结构体的基本概念" class="headerlink" title="8.1结构体的基本概念"></a>8.1结构体的基本概念</h3><blockquote>
<p>结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型</p>
</blockquote>
<h3 id="8-2-结构体的定义和使用"><a href="#8-2-结构体的定义和使用" class="headerlink" title="8.2 结构体的定义和使用"></a>8.2 结构体的定义和使用</h3><blockquote>
<p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 &#x3D; { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//创建一个学生的数据类型</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的数据类型</span></span><br><span class="line">&gt;<span class="comment">//自定义数据类型，已有数据类型的一些集合</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">Student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line">&gt;<span class="comment">//可以通过struct Student si;定义一个这个类型的变量</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> su1;<span class="comment">//创建了一个该结构体变量,这里的struct可以省略</span></span><br><span class="line"><span class="comment">//通过 . 来访问结构体的属性</span></span><br><span class="line">su1.name = <span class="string">&quot;张三&quot;</span>;  <span class="comment">//给结构体变量内的属性赋值</span></span><br><span class="line">su1.age = <span class="number">20</span>;</span><br><span class="line">su1.score = <span class="number">90</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; su1.name &lt;&lt; <span class="string">&quot; 年纪：&quot;</span> &lt;&lt; su1.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; su1.score &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//定义方式2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> su2 = &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="number">80</span> &#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; su2.name &lt;&lt; <span class="string">&quot; 年纪：&quot;</span> &lt;&lt; su2.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; su2.score &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>定义结构体时的关键词struct，不可省略</li>
<li>创建结构体变量时，关键词struct可以省略</li>
<li>结构体变量利用操作符” . “访问成员。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="8-3结构体数组"><a href="#8-3结构体数组" class="headerlink" title="8.3结构体数组"></a>8.3结构体数组</h3><blockquote>
<p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的数据类型</span></span><br><span class="line">&gt;<span class="comment">//自定义数据类型，已有数据类型的一些集合</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">Student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line">&gt;<span class="comment">//可以通过struct Student si;定义一个这个类型的变量</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> arr[] =</span><br><span class="line">&#123;</span><br><span class="line">	&#123;<span class="string">&quot;ttt&quot;</span>,<span class="number">20</span>,<span class="number">100</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">	&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">	&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="8-4结构体指针"><a href="#8-4结构体指针" class="headerlink" title="8.4结构体指针"></a>8.4结构体指针</h3><blockquote>
<p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的数据类型</span></span><br><span class="line">&gt;<span class="comment">//自定义数据类型，已有数据类型的一些集合</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line">&gt;<span class="comment">//可以通过struct Student si;定义一个这个类型的变量</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> s = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>* p = &amp;s;</span><br><span class="line"><span class="comment">//通过指针来访问结构体</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="string">&quot; 年纪:&quot;</span>&lt;&lt; p-&gt;age&lt;&lt;<span class="string">&quot; 成绩：&quot;</span>&lt;&lt;p-&gt;score&lt;&lt;std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="8-5结构体嵌套结构体"><a href="#8-5结构体嵌套结构体" class="headerlink" title="8.5结构体嵌套结构体"></a>8.5结构体嵌套结构体</h3><blockquote>
<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的数据类型</span></span><br><span class="line">&gt;<span class="comment">//自定义数据类型，已有数据类型的一些集合</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line">&gt;<span class="comment">//可以通过struct Student si;定义一个这个类型的变量</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&gt;&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu1;<span class="comment">//子结构体</span></span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">teacher t;</span><br><span class="line">t.id = <span class="number">10000</span>;</span><br><span class="line">t.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">t.age = <span class="number">40</span>;</span><br><span class="line">t.stu1.age = <span class="number">20</span>;</span><br><span class="line">t.stu1.name = <span class="string">&quot;李华&quot;</span>;</span><br><span class="line">t.stu1.score = <span class="number">70</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;老师的姓名：&quot;</span> &lt;&lt; t.name &lt;&lt; <span class="string">&quot; 老师的编号：&quot;</span> &lt;&lt; t.id &lt;&lt; <span class="string">&quot; 老师的年纪：&quot;</span> &lt;&lt; t.age &lt;&lt; <span class="string">&quot;辅导的学生姓名 ：&quot;</span></span><br><span class="line">	&lt;&lt; t.stu1.name &lt;&lt; <span class="string">&quot;年纪&quot;</span> &lt;&lt; t.stu1.age &lt;&lt; <span class="string">&quot;分数&quot;</span> &lt;&lt; t.stu1.score &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
</blockquote>
</blockquote>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><blockquote>
<p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种 ：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent</span><span class="params">(<span class="keyword">struct</span> student)</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent2</span><span class="params">(<span class="keyword">struct</span> student*)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的结构体类型</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">student stu;</span><br><span class="line">stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">stu.age = <span class="number">20</span>;</span><br><span class="line">stu.score = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">PrintStudent</span>(stu);</span><br><span class="line"><span class="built_in">PrintStudent2</span>(&amp;stu);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main函数中的姓名：&quot;</span> &lt;&lt; stu.name </span><br><span class="line">	      &lt;&lt; <span class="string">&quot; main函数中的年纪：&quot;</span> &lt;&lt; stu.age </span><br><span class="line">	      &lt;&lt; <span class="string">&quot; main函数中的分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//值传递,子函数中修改值不会影响原函数的值</span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent</span><span class="params">(<span class="keyword">struct</span> student s)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">s.age = <span class="number">25</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;子函数中的姓名：&quot;</span> &lt;&lt; s.name </span><br><span class="line">		  &lt;&lt; <span class="string">&quot; 子函数中的年纪：&quot;</span> &lt;&lt; s.age </span><br><span class="line">	      &lt;&lt; <span class="string">&quot; 子函数中的分数：&quot;</span> &lt;&lt; s.score &lt;&lt; std::endl;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//地址传递，子函数中修改值，会影响原函数的值</span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent2</span><span class="params">(<span class="keyword">struct</span> student* s)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">s-&gt;age = <span class="number">30</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;子函数中的姓名：&quot;</span> &lt;&lt; s-&gt;name </span><br><span class="line">	      &lt;&lt; <span class="string">&quot; 子函数中的年纪：&quot;</span> &lt;&lt; s-&gt;age </span><br><span class="line">	      &lt;&lt; <span class="string">&quot; 子函数中的分数：&quot;</span> &lt;&lt; s-&gt;score &lt;&lt; std::endl;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="8-7-结构体中const使用场景"><a href="#8-7-结构体中const使用场景" class="headerlink" title="8.7 结构体中const使用场景"></a>8.7 结构体中const使用场景</h3><blockquote>
<p><strong>作用：</strong>用const来防止误操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> student*)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建一个学生的结构体类型</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>    <span class="comment">//此时的struct Student 跟int 一样，是一个数据类型</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">student stu;</span><br><span class="line">stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">stu.age = <span class="number">20</span>;</span><br><span class="line">stu.score = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">PrintStudent</span>(&amp;stu);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;张三的年龄&quot;</span> &lt;&lt; stu.age &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintStudent</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> student* stu)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="comment">//stu-&gt;age = 100;// 在结构体类型前面添加const,指针常量，指针指向的值不能被修改</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;子函数中的姓名：&quot;</span> &lt;&lt; stu-&gt;name</span><br><span class="line">	      &lt;&lt; <span class="string">&quot; 子函数中的年纪：&quot;</span> &lt;&lt; stu-&gt;age</span><br><span class="line">	      &lt;&lt; <span class="string">&quot; m子函数中的分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; std::endl;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><blockquote>
<p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">ImportMess</span><span class="params">(<span class="keyword">struct</span> teacher tarr[], <span class="type">int</span> )</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintInfo</span><span class="params">(<span class="keyword">struct</span> teacher tarr[], <span class="type">int</span>)</span></span>;</span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>   </span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string sname;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string tname;</span><br><span class="line">student arr[<span class="number">5</span>];</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//给老师和学生赋值</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">teacher tarr[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(tarr) / <span class="built_in">sizeof</span>(tarr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">ImportMess</span>(tarr, len);</span><br><span class="line"><span class="built_in">PrintInfo</span>(tarr, len);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">ImportMess</span><span class="params">(<span class="keyword">struct</span> teacher tarr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">std::string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	tarr[i].tname = <span class="string">&quot;teacher_&quot;</span>;</span><br><span class="line">	tarr[i].tname += nameSeed[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> random = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		tarr[i].arr[j].sname = <span class="string">&quot;student_&quot;</span>;</span><br><span class="line">		tarr[i].arr[j].sname += nameSeed[j];</span><br><span class="line">		tarr[i].arr[j].score = random;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">PrintInfo</span><span class="params">(<span class="keyword">struct</span> teacher tarr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;老师的姓名：&quot;</span> &lt;&lt; tarr[i].tname &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;学生姓名：&quot;</span> &lt;&lt; tarr[i].arr[j].sname &lt;&lt; <span class="string">&quot; 学生分数：&quot;</span> &lt;&lt; tarr[i].arr[j].score &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>如果函数定义中，传入的参数包含数组的话，在函数声明的时候需要保留数组（arr[]）</li>
<li>如果函数定义中，传入的参数是结构体类型的时候，函数声明时，struct不能省略。</li>
<li>随机数种子srand((unsigned int)time(NULL));</li>
</ul>
</blockquote>
</blockquote>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><blockquote>
<p>上方的案例也使用了该重点知识</p>
</blockquote>
<blockquote>
<h3 id="地址传递不仅仅只有指针"><a href="#地址传递不仅仅只有指针" class="headerlink" title="地址传递不仅仅只有指针"></a>地址传递不仅仅只有指针</h3><p>如果将数组首地址作为函数传递的参数，则子函数参数的定义需要为一个数组，且长度应该与原函数一致（先不确定长度，系统根据原函数数组长度字节判断）。</p>
<p>这样做会让子函数所定义的数组首地址与main函数中传递来的数组首地址是一样的（地址传递）。这样的结果就是修改子函数内数组的值，也会修改main函数的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="type">int</span> tarr[], <span class="type">int</span> )</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> ttarr[], <span class="type">int</span>)</span></span>;</span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">student</span>   </span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string sname;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string tname;</span><br><span class="line">student arr[<span class="number">5</span>];</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//给老师和学生赋值</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">Input</span>(arr, len);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;子函数赋值后，在main函数内打印数组&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">Print</span>(arr, len);</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="type">int</span> tarr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="type">int</span> random = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;子函数给数组赋值&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cin&gt;&gt;tarr[i];</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> ttarr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;在另外一个子函数内打印数组：&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; ttarr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Sophon3/Figure-bed/images2021/2021202111021010360.png"></p>
</blockquote>
<h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><blockquote>
<p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">struct</span> hero thre[], <span class="type">int</span>)</span></span>;</span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">struct</span> hero thre[], <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//创建英雄结构体</span></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">hero</span> </span><br><span class="line">&gt;&#123;</span><br><span class="line">std::string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">std::string gender;</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">hero threeg[] =</span><br><span class="line">&#123;</span><br><span class="line">	&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(threeg) / <span class="built_in">sizeof</span>(threeg[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">Print</span>(threeg, len);</span><br><span class="line"><span class="built_in">BubbleSort</span>(threeg, len);</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">Print</span>(threeg, len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">struct</span> hero thre[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (thre[j].age &gt; thre[j + <span class="number">1</span>].age)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = thre[j];</span><br><span class="line">			thre[j] = thre[j + <span class="number">1</span>];</span><br><span class="line">			thre[j + <span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">struct</span> hero thre[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; thre[i].name </span><br><span class="line">		      &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; thre[i].age </span><br><span class="line">		      &lt;&lt; <span class="string">&quot; 性别：&quot;</span> &lt;&lt; thre[i].gender </span><br><span class="line">		      &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <categories>
        <category>C++</category>
        <category>黑马程序员</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建部署到GitHub&amp;&amp;云服务器&amp;&amp;绑定域名</title>
    <url>/2022/04/09/Hexo+github&amp;&amp;%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>这里我将介绍如何从零使用hexo搭建一个个人博客，并且将其部署到GitHub上或者服务器上，并且将自己的域名与GitHub或者服务器绑定，实现通过域名访问自己的博客。这个期间我踩了很多坑，所以我会尽量讲的清楚，不留坑。</p>
</blockquote>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>如果你好奇node.js是什么可以看这里<a href="https://www.sitepoint.com/node-js-is-the-new-black/">Node.js</a></p>
<h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><ul>
<li>这里我使用NVM来安装node.js，并且我也推荐使用这种方法来安装，nvm可以帮助你管理多个不同版本的node.js。因为你可能在不同的项目里需要到不同版本的node.js。</li>
</ul>
<ol>
<li>下载NVM,可以直接前往<a href="https://github.com/coreybutler/nvm-windows/releases">GitHub</a>下载,选择nvm-setup.zip下载就行，之后直接解压按照默认方式安装就好。</li>
</ol>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204092304064.png"></p>
<ol start="2">
<li>进入命令行窗口输入 <code> nvm -v</code>查看是否安装成功，这里需要使用管理员权限打开CMD,后面的过程会用到管理员权限。下图为成功截图。</li>
</ol>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204092315834.png"></p>
<ol start="3">
<li>下载node.js</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install node.jsb版本</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">nvm install 16.10.0</span><br></pre></td></tr></table></figure>

<p>如果出现下载速度较慢的情况下可以为nvm添加淘宝源,找到nvm的安装路径，打开setting.txt文件（默认路径 C:\Users\用户名\AppData\Roaming\nvm）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204092329312.png"></p>
<ol start="4">
<li>查看已经安装好的node.js版本，并选择node.js版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本：</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择版本：</span></span><br><span class="line">nvm node.js版本</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">nvm 16.10.0</span><br></pre></td></tr></table></figure>

<p>这里选择node.js版本需要管理员权限，如果出现乱码情况就是没有管理员权限，没有选择成功。想确定是否选择成功可以再次输入 <code>node list</code>查看，成功的清空下，版本后会有一段话，如（Currently using 64-bit executable）。</p>
<ol start="5">
<li>查看Node.js和npm版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204092335688.png"></p>
<p>此时就已经安装好Node.js了。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>直接去<a href="https://git-scm.com/">Git</a>官网下载就行,全部默认安装就行。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>具体问题可以去<a href="https://hexo.io/zh-cn/">Hexo</a>官网看</p>
<ol>
<li>全局安装Hexo,这里建议管理员启动CMD，不然后面可能会报错，也不要用powershell，这个也会报错，原因我暂时未知。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看hexo是否安装成功</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果出现问题可以尝试将此路径 C:\Users\用户名\AppData\Roaming\nvm\v16.10.0 添加到系统的环境变量中。（这里包含hexo.cmd文件）</p>
<ol start="3">
<li>创建Hexo本地博客，新建一个blog文件夹，在这个文件夹内打开CMD</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建：</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 本地运行</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204100931780.png"></p>
<p>此时表示本地已经安装好hexo。</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><ol>
<li><p>首先你需要有一个<a href="https://github.com/">Github</a>账号，直接去<a href="https://github.com/">Github</a>官网注册就行。</p>
</li>
<li><p>创建一个仓库（repository），第一次尽量以<code>用户名.github.io</code>,当然你可以使用其他合理的名字，不过可能会出现问题。</p>
</li>
</ol>
<p>   选择public和 <code>add a README file</code>即可</p>
<ol start="3">
<li>在Blog文件夹打开CMD，安装一个插件（部署到远程必要的插件）。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打开Blog文件夹下的_config.yml(配置文件),修改最后的deploy:</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/sophon123/helloword.github.io.git</span>  <span class="comment">#你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment">#选择的仓库分支</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>将hexo部署到GitHub</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清楚缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成网站静态文件到默认设置的 public 文件夹</span></span><br><span class="line">hexo d <span class="comment"># 将生成的网站静态文件部署到设定的远程仓库</span></span><br></pre></td></tr></table></figure>

<p>如果出现如下报错，是由于你这台电脑第一次使用git。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204100952793.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入以下内容</span></span><br><span class="line">git config --git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">git config --global user.email xxxxxx@163.com </span><br><span class="line">git config --global user.name sophon3</span><br></pre></td></tr></table></figure>

<p>设置完成后再输入<code>hexo d</code>重新上传，如果出现下图可以直接登陆上传，不过更加推荐给GitHub添加你电脑的rsa密钥，这样以后上传就不再需要登陆。即使你配置了rsa登陆，这里也需要你先登陆一次。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101031229.png"></p>
<ol start="6">
<li>将rsa添加到github</li>
</ol>
<p>在CMD窗口输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>直接回车就行，全部选择默认</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101040194.png"></p>
<p>密钥生成成功，打开文件夹 <code>C:\Users\Sophon\.ssh</code>下的<code>id_rsa.pub</code>文件，里面就是本机的rsa密钥。打开你的GitHub，点击你的头像，依次选择setting -&gt; SSH and GPG keys -&gt; New SSH key ,</p>
<p>将你电脑的rsa密钥添加到GitHub上。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101047513.png"></p>
<p>再次使用<code>hexo d</code>上传，这时候你就能通过<code>https://username.github.io/仓库名</code>访问了。这时候部署到GitHub端基本完成了。如果你的仓库名是用户名则不需要加仓库名。如果出现无法渲染的情况，请打开blog文件夹下的_config.yml文件，按照其要求修改url,即改为<code>https://username.github.io/仓库</code></p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101155960.png"></p>
<h2 id="部署到云服务器（Ubuntu20系统）"><a href="#部署到云服务器（Ubuntu20系统）" class="headerlink" title="部署到云服务器（Ubuntu20系统）"></a>部署到云服务器（Ubuntu20系统）</h2><ul>
<li>该部分内容有参考此博客<a href="https://mrxiuxing.com/posts/d3b909a4.html">将Hexo博客部署至腾讯云服务器(Ubuntu18.04)</a></li>
</ul>
<ol>
<li><a href="##%E5%AE%89%E8%A3%85Node.js">hexo本地部署</a>与上方一致直接进入服务器部署，什么厂家的服务器都一样，我这里使用的系统为ubuntu20.04。</li>
<li>安装git和nginx,Ubuntu20好像默认已经安装有git</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git nginx -y</span><br></pre></td></tr></table></figure>

<p>测试是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101241595.png"></p>
<p>测试nginx是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service    <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure>

<p>去浏览器输入服务器的公网ip,看见如下图类似的画面则已经安装成功</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101242373.png"></p>
<ol start="3">
<li>创建一个git用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser git  <span class="comment"># 创建git用户</span></span><br><span class="line">sudo passwd 12345 <span class="comment"># 设置git用户的密码</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 740 /etc/sudoers   <span class="comment">#(该文件为只读，想要增加内容必须增加权限)</span></span><br></pre></td></tr></table></figure>

<p>给git用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sudoeres</span><br><span class="line"><span class="comment"># 如果没有成功进去可以先进入/etc目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line">sudo vim /etc/sudoeres</span><br></pre></td></tr></table></figure>

<p>找到 <code>root    ALL=(ALL:ALL) ALL</code>在其下面添加 <code>git     ALL=(ALL;ALL) ALL</code>,如下图 。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101218177.png"></p>
<p>保存退出后将权限修改回来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将你主机的rsa与云服务器绑定。怎么得到本机rsa与上方配置GitHub的方法一样。</li>
</ol>
<p>切换到git用户，创建一个<code>.ssh</code>文件夹，在中这个文件夹下面创建一个<code>authorized_keys</code>，这个文件没有后缀。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>将你的主机<code>C:\Users\Sophon\.ssh</code>下的<code>id_rsa.pub</code>的内容复制到 authorized_keys下面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证是否绑定成功</span></span><br><span class="line">ssh git@服务器公网ip</span><br></pre></td></tr></table></figure>

<p>如果不需要密码就能登陆上你的服务器，证明已经绑定成功。</p>
<p>修改这里的权限</p>
<ol start="5">
<li>建立网站根目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root  <span class="comment"># 切换到root用户</span></span><br><span class="line"><span class="built_in">mkdir</span> /home/hexo  <span class="comment"># 作为网站根目录</span></span><br><span class="line"><span class="built_in">chown</span> git:git -R /home/hexo</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>配置Nginx</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default    <span class="comment"># 编辑配置</span></span><br></pre></td></tr></table></figure>

<p>内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    #server_name  www.yours_server_name.com;    # 修改为自己的域名</span><br><span class="line">    root         /home/hexo;    # 修改为网站的根目录</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    #Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用nginx -t命令检查配置文件的语法是否出错。然后使用systemctl restart nginx.service systemctl命令重启服务即可。</p>
<ol start="7">
<li>建立git库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="built_in">cd</span> /home/git   <span class="comment"># 在 git 用户目录下创建</span></span><br><span class="line">git init --bare blog.git   <span class="comment"># 一定要加上--bare</span></span><br><span class="line"><span class="built_in">chown</span> git:git -R blog.git   <span class="comment">#赋予git用户权限</span></span><br></pre></td></tr></table></figure>

<p>这里使用的是<code>post-receive</code>这个钩子，当git有收发的时候就会调用这个钩子。 在<code>blog.git</code>裸库的 <code>hooks</code>文件夹中，新建<code>post-receive</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>填入以下内容，其中 &#x2F;home&#x2F;hexo 为网站目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>添加权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>本地配置</li>
</ol>
<p>找到你主机的blog文件夹，打开_config.yml文件，在最后配置deploy。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101257198.png"></p>
<p>如果你需要部署到一个地方，只需要添加一个链接即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line">tencent_cloud: git@公网ip:/home/git/blog.git</span><br></pre></td></tr></table></figure>

<p>这里就已经部署完成了，先<code>hexo clean</code>清理一下缓存，就可以<code>hexo g; hexo d</code>部署了</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul>
<li>首先你需要有一个域名，正常到腾讯云或者阿里云购买一个就行了。</li>
<li>购买之后到域名解析处，在购买域名的厂商那里找，每个厂商会有些不同。</li>
</ul>
<img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101306184.png" style="zoom:80%;" />

<p>腾讯云的界面如上，点击你蓝色的域名就能进入管理。</p>
<h3 id="GitHub-Page绑定域名"><a href="#GitHub-Page绑定域名" class="headerlink" title="GitHub Page绑定域名"></a>GitHub Page绑定域名</h3><p>添加一条解析记录，具体你可以看看页面给的帮助文档</p>
<p>例如：</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>www</td>
<td>CNAME</td>
<td>username.github.io</td>
</tr>
</tbody></table>
<p>然后在你主机的<code>Blog\source</code>文件夹下面添加一个<code>CNAME</code>文件，里面的内容填写你的域名,如<code>www.buzhouge.top</code>。</p>
<p>然后进入你GitHub部署hexo博客的仓库，依次进入setting -&gt;  Pages ，在这里找到Custom domain,在这里添加上你的域名即可。然后将你的博客更新上传一次，等待几分钟域名解析，就能通过域名访问你的博客了。</p>
<p>当然你可以不用一级域名来绑定GitHub，你可以有很多的二级域名，只需要在解析域名时将主机记录修改。比如：</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>git</td>
<td>CNAME</td>
<td>username.github.io</td>
</tr>
</tbody></table>
<p>此时解析的域名就是git.buzhouge.top</p>
<p>可以通过<a href="http://git.buzhouge.top/">http://git.buzhouge.top</a> 来访问博客。</p>
<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204101320898.png"></p>
<h3 id="云服务器绑定域名"><a href="#云服务器绑定域名" class="headerlink" title="云服务器绑定域名"></a>云服务器绑定域名</h3><p>如果你没有绑定域名，那么你可以直接通过公网ip访问你的博客，如果想要将云服务器与域名绑定就比比较简单了，直接去域名解析处添加解析记录</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>www</td>
<td>A</td>
<td>服务器公网IP</td>
</tr>
<tr>
<td>@</td>
<td>A</td>
<td>服务器公网IP</td>
</tr>
</tbody></table>
<p><a href="http://buzhouge.top/">http://buzhouge.top</a></p>
<p>这样你就能通过域名访问你部署在服务器上的博客了。</p>
<h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>github</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈自己</title>
    <url>/2022/04/09/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p><img src="http://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/202204091315494.png"></p>
<p>——2022.4.9    </p>
<p>您好，我是杰。这是我的第一篇博客，用来记录和分享之后的学习与生活。<br>先谈谈我现在大学的经历，现在大三下。正如不少人一样，进入大学都对自己的学校不是那么“满意”。一腔热血，觉得自己的能力不该处于这个学校，一定能做出什么事情。不过我却只有三分钟热度，刚开始加入了各种社团，准备以后参加各种比赛，正有大干一场的准备。<br>​    大一上那年用51单片机点灯，用点阵显示几个字，做了个小功放，自己画PCD,做板子。也成功加入了学校内实践能力非常强的社团。大一上的生活可以说比较丰富的。但是之后突然袭来的新冠疫情，改变了很多事情（这只是给我自己的一个借口）。学校不开学，开始线上课程，我每天在家就是吃睡，根本无心上课。半个学期之后，课程内容什么都没学会，社团学长要做的作品还处于新建文件夹阶段，体重 从120+到了150+。这可能是我最安逸且焦虑的时期。到了5月份学校通知开学，开学不久之后就要来一次期中考试，并且一个月后又开始期末考试。社团作品进度依旧是5%… 无颜面对社团学长学姐，与学长沟通后退出社团（懦夫行为，这可能是我大学期间最大的遗憾）。退出社团之后开始全力补上之前落下的课程，最后期末考试没有挂科的课程，这是幸运的。<br>​    后面的时间大部分处于一种混沌的状态，不甘心现状，却又不敢大力去改变。也尝试过去参加比赛，电子设计大赛、数学建模、互联网+、大创项目，由于自己能力不足，当时也比较迷茫，也找不到方向，同时也没有契合自己的队友。最终这些比赛都止步于校赛、参与奖。刚退出社团的时候，当时跟我一起加入社团的朋友还经常邀请我一起组队比赛，但我都拒绝了（真的很懦弱）。后面看到他拿到了许多大的奖项，我只能祝福他，并且羡慕他。<br>​    我不知道是因为疫情还是因为什么，时间过得非常快，不知不觉就已经到了大三下。大二一年及大三上都是平平淡淡的度过，教室-食堂-宿舍。什么都没有获得，好的一点是成绩处于20%（不发达地区双非），目前看来能正常毕业。少有的比较值得庆祝的事情就是收获了爱情，和成功拿到了驾驶证。<br>现在正在写这篇文章的我，依然不知道以后会怎么样，将来会干嘛。很迷茫，文章写的也很乱。我并不是一个甘心平凡的人，我现在还有一些斗志，创建这个网站，写这篇博客的本心是寻求改变。暂定考研本校，希望多年后能将自己提升到一个自己满意的程度。</p>
<p>感谢您的阅读，谢谢！</p>
]]></content>
      <tags>
        <tag>Begin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.![](​<a href="https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/20220409101">https://cdn.jsdelivr.net/gh/sophon123/buzhouge_img1/20220409101</a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>
